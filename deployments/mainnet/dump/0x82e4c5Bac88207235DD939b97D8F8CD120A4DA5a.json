{
  "address": "0x82e4c5Bac88207235DD939b97D8F8CD120A4DA5a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "auth_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidity_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "deployerContract_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dexId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "token0AdjustedSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1AdjustedSupply",
          "type": "uint256"
        }
      ],
      "name": "AdjustedSupplyOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dexId",
          "type": "bytes32"
        }
      ],
      "name": "DexNotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExcessiveSwapAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorId_",
          "type": "uint256"
        }
      ],
      "name": "FluidSafeTransferError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientERC20",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientNativeToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMsgValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSwapAmounts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenReservesTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dexId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapData",
          "type": "uint256"
        }
      ],
      "name": "LogSwap",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot_",
          "type": "bytes32"
        }
      ],
      "name": "readFromStorage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path_",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "internalType": "struct DexKey[]",
          "name": "dexKeys_",
          "type": "tuple[]"
        },
        {
          "internalType": "int256",
          "name": "amountSpecified_",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "amountLimit_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isCallback_",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "callbackData_",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData_",
          "type": "bytes"
        }
      ],
      "name": "swapMultihop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountUnspecified_",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "internalType": "struct DexKey",
          "name": "dexKey_",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "swap0To1_",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "amountSpecified_",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "amountLimit_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isCallback_",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "callbackData_",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData_",
          "type": "bytes"
        }
      ],
      "name": "swapSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountUnspecified_",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcf78a936e28fbc7f6c4b14a40801a5ab26f9970303141a3947f1486944c7fc55",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x8a5B57d047D284A2A6ec774A8BCA2BeaB2A6C955",
    "contractAddress": null,
    "transactionIndex": 130,
    "gasUsed": "2924581",
    "logsBloom": "0x
    "blockHash": "0x0bfeabdb6fe5824851412e861334a279667e4a0a3e90a77c0acf3aaabba6a184",
    "transactionHash": "0xcf78a936e28fbc7f6c4b14a40801a5ab26f9970303141a3947f1486944c7fc55",
    "logs": [],
    "blockNumber": 23007540,
    "cumulativeGasUsed": "19637433",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4F6F977aCDD1177DCD81aB83074855EcB9C2D49e",
    "0x52Aa899454998Be5b000Ad077a46Bbe360F4e497",
    "0x4EC7b668BAF70d4A4b0FC7941a7708A07b6d45Be"
  ],
  "numDeployments": 1,
  "solcInputHash": "3ba7edb9f7e9f389c1c6909f6f8c9c8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidity_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployerContract_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dexId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"token0AdjustedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1AdjustedSupply\",\"type\":\"uint256\"}],\"name\":\"AdjustedSupplyOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dexId\",\"type\":\"bytes32\"}],\"name\":\"DexNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveSwapAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorId_\",\"type\":\"uint256\"}],\"name\":\"FluidSafeTransferError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientERC20\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientNativeToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMsgValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSwapAmounts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenReservesTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dexId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapData\",\"type\":\"uint256\"}],\"name\":\"LogSwap\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot_\",\"type\":\"bytes32\"}],\"name\":\"readFromStorage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path_\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct DexKey[]\",\"name\":\"dexKeys_\",\"type\":\"tuple[]\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified_\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"amountLimit_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCallback_\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callbackData_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData_\",\"type\":\"bytes\"}],\"name\":\"swapMultihop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnspecified_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct DexKey\",\"name\":\"dexKey_\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"swap0To1_\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified_\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"amountLimit_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCallback_\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callbackData_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData_\",\"type\":\"bytes\"}],\"name\":\"swapSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnspecified_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swapMultihop(address[],(address,address,bytes32)[],int256,uint256,address,bool,bytes,bytes)\":{\"details\":\"Uses _swapIn for positive amountSpecified_ (user provides input), _swapOut for negative (user receives output).\",\"params\":{\"amountLimit_\":\"The minimum/maximum amount for the unspecified side.\",\"amountSpecified_\":\"The amount to swap (positive for exact input, negative for exact output).\",\"callbackData_\":\"Data to pass to the callback.\",\"dexKeys_\":\"The dex pools to swap through.\",\"isCallback_\":\"Whether to invoke a callback for transfering the input token.\",\"path_\":\"The path of the swap.\",\"to_\":\"The recipient address.\"},\"returns\":{\"amountUnspecified_\":\"The amount of the unspecified token.\"}},\"swapSingle((address,address,bytes32),bool,int256,uint256,address,bool,bytes,bytes)\":{\"details\":\"Uses _swapIn for positive amountSpecified_ (user provides input), _swapOut for negative (user receives output).\",\"params\":{\"amountLimit_\":\"The minimum/maximum amount for the unspecified side.\",\"amountSpecified_\":\"The amount to swap (positive for exact input, negative for exact output).\",\"dexKey_\":\"The dex pool to swap through.\",\"swap0To1_\":\"Whether to swap from token0 to token1 or vice versa.\",\"to_\":\"The recipient address.\"}}},\"title\":\"FluidDexLite\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swapMultihop(address[],(address,address,bytes32)[],int256,uint256,address,bool,bytes,bytes)\":{\"notice\":\"Swap through a path of dex pools\"},\"swapSingle((address,address,bytes32),bool,int256,uint256,address,bool,bytes,bytes)\":{\"notice\":\"Swap through a single dex pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocols/dexLite/core/main.sol\":\"FluidDexLite\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"contracts/infiniteProxy/interfaces/iProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.21 <=0.8.29;\\n\\ninterface IProxy {\\n    function setAdmin(address newAdmin_) external;\\n\\n    function setDummyImplementation(address newDummyImplementation_) external;\\n\\n    function addImplementation(address implementation_, bytes4[] calldata sigs_) external;\\n\\n    function removeImplementation(address implementation_) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function getDummyImplementation() external view returns (address);\\n\\n    function getImplementationSigs(address impl_) external view returns (bytes4[] memory);\\n\\n    function getSigsImplementation(bytes4 sig_) external view returns (address);\\n\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n}\\n\",\"keccak256\":\"0x30d8b90d077a4ab2b116788f4b47ec7009dc49e11ef76f1d7bf07bd0cc65b406\",\"license\":\"MIT\"},\"contracts/libraries/addressCalcs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.21 <=0.8.29;\\n\\n/// @notice implements calculation of address for contracts deployed through CREATE.\\n/// Accepts contract deployed from which address & nonce\\nlibrary AddressCalcs {\\n\\n    /// @notice                         Computes the address of a contract based\\n    /// @param deployedFrom_            Address from which the contract was deployed\\n    /// @param nonce_                   Nonce at which the contract was deployed\\n    /// @return contract_               Address of deployed contract\\n    function addressCalc(address deployedFrom_, uint nonce_) internal pure returns (address contract_) {\\n        // @dev based on https://ethereum.stackexchange.com/a/61413\\n\\n        // nonce of smart contract always starts with 1. so, with nonce 0 there won't be any deployment\\n        // hence, nonce of vault deployment starts with 1.\\n        bytes memory data;\\n        if (nonce_ == 0x00) {\\n            return address(0);\\n        } else if (nonce_ <= 0x7f) {\\n            data = abi.encodePacked(bytes1(0xd6), bytes1(0x94), deployedFrom_, uint8(nonce_));\\n        } else if (nonce_ <= 0xff) {\\n            data = abi.encodePacked(bytes1(0xd7), bytes1(0x94), deployedFrom_, bytes1(0x81), uint8(nonce_));\\n        } else if (nonce_ <= 0xffff) {\\n            data = abi.encodePacked(bytes1(0xd8), bytes1(0x94), deployedFrom_, bytes1(0x82), uint16(nonce_));\\n        } else if (nonce_ <= 0xffffff) {\\n            data = abi.encodePacked(bytes1(0xd9), bytes1(0x94), deployedFrom_, bytes1(0x83), uint24(nonce_));\\n        } else {\\n            data = abi.encodePacked(bytes1(0xda), bytes1(0x94), deployedFrom_, bytes1(0x84), uint32(nonce_));\\n        }\\n\\n        return address(uint160(uint256(keccak256(data))));\\n    }\\n\\n}\",\"keccak256\":\"0xed8e77dcf54703084c26a53b45d8139e5417488bc8f22a988c91b7813d132961\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/bigMathMinified.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.21 <=0.8.29;\\n\\n/// @title library that represents a number in BigNumber(coefficient and exponent) format to store in smaller bits.\\n/// @notice the number is divided into two parts: a coefficient and an exponent. This comes at a cost of losing some precision\\n/// at the end of the number because the exponent simply fills it with zeroes. This precision is oftentimes negligible and can\\n/// result in significant gas cost reduction due to storage space reduction.\\n/// Also note, a valid big number is as follows: if the exponent is > 0, then coefficient last bits should be occupied to have max precision.\\n/// @dev roundUp is more like a increase 1, which happens everytime for the same number.\\n/// roundDown simply sets trailing digits after coefficientSize to zero (floor), only once for the same number.\\nlibrary BigMathMinified {\\n    /// @dev constants to use for `roundUp` input param to increase readability\\n    bool internal constant ROUND_DOWN = false;\\n    bool internal constant ROUND_UP = true;\\n\\n    /// @dev converts `normal` number to BigNumber with `exponent` and `coefficient` (or precision).\\n    /// e.g.:\\n    /// 5035703444687813576399599 (normal) = (coefficient[32bits], exponent[8bits])[40bits]\\n    /// 5035703444687813576399599 (decimal) => 10000101010010110100000011111011110010100110100000000011100101001101001101011101111 (binary)\\n    ///                                     => 10000101010010110100000011111011000000000000000000000000000000000000000000000000000\\n    ///                                                                        ^-------------------- 51(exponent) -------------- ^\\n    /// coefficient = 1000,0101,0100,1011,0100,0000,1111,1011               (2236301563)\\n    /// exponent =                                            0011,0011     (51)\\n    /// bigNumber =   1000,0101,0100,1011,0100,0000,1111,1011,0011,0011     (572493200179)\\n    ///\\n    /// @param normal number which needs to be converted into Big Number\\n    /// @param coefficientSize at max how many bits of precision there should be (64 = uint64 (64 bits precision))\\n    /// @param exponentSize at max how many bits of exponent there should be (8 = uint8 (8 bits exponent))\\n    /// @param roundUp signals if result should be rounded down or up\\n    /// @return bigNumber converted bigNumber (coefficient << exponent)\\n    function toBigNumber(\\n        uint256 normal,\\n        uint256 coefficientSize,\\n        uint256 exponentSize,\\n        bool roundUp\\n    ) internal pure returns (uint256 bigNumber) {\\n        assembly {\\n            let lastBit_\\n            let number_ := normal\\n            if gt(number_, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x80, number_)\\n                lastBit_ := 0x80\\n            }\\n            if gt(number_, 0xFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x40, number_)\\n                lastBit_ := add(lastBit_, 0x40)\\n            }\\n            if gt(number_, 0xFFFFFFFF) {\\n                number_ := shr(0x20, number_)\\n                lastBit_ := add(lastBit_, 0x20)\\n            }\\n            if gt(number_, 0xFFFF) {\\n                number_ := shr(0x10, number_)\\n                lastBit_ := add(lastBit_, 0x10)\\n            }\\n            if gt(number_, 0xFF) {\\n                number_ := shr(0x8, number_)\\n                lastBit_ := add(lastBit_, 0x8)\\n            }\\n            if gt(number_, 0xF) {\\n                number_ := shr(0x4, number_)\\n                lastBit_ := add(lastBit_, 0x4)\\n            }\\n            if gt(number_, 0x3) {\\n                number_ := shr(0x2, number_)\\n                lastBit_ := add(lastBit_, 0x2)\\n            }\\n            if gt(number_, 0x1) {\\n                lastBit_ := add(lastBit_, 1)\\n            }\\n            if gt(number_, 0) {\\n                lastBit_ := add(lastBit_, 1)\\n            }\\n            if lt(lastBit_, coefficientSize) {\\n                // for throw exception\\n                lastBit_ := coefficientSize\\n            }\\n            let exponent := sub(lastBit_, coefficientSize)\\n            let coefficient := shr(exponent, normal)\\n            if and(roundUp, gt(exponent, 0)) {\\n                // rounding up is only needed if exponent is > 0, as otherwise the coefficient fully holds the original number\\n                coefficient := add(coefficient, 1)\\n                if eq(shl(coefficientSize, 1), coefficient) {\\n                    // case were coefficient was e.g. 111, with adding 1 it became 1000 (in binary) and coefficientSize 3 bits\\n                    // final coefficient would exceed it's size. -> reduce coefficent to 100 and increase exponent by 1.\\n                    coefficient := shl(sub(coefficientSize, 1), 1)\\n                    exponent := add(exponent, 1)\\n                }\\n            }\\n            if iszero(lt(exponent, shl(exponentSize, 1))) {\\n                // if exponent is >= exponentSize, the normal number is too big to fit within\\n                // BigNumber with too small sizes for coefficient and exponent\\n                revert(0, 0)\\n            }\\n            bigNumber := shl(exponentSize, coefficient)\\n            bigNumber := add(bigNumber, exponent)\\n        }\\n    }\\n\\n    /// @dev get `normal` number from `bigNumber`, `exponentSize` and `exponentMask`\\n    function fromBigNumber(\\n        uint256 bigNumber,\\n        uint256 exponentSize,\\n        uint256 exponentMask\\n    ) internal pure returns (uint256 normal) {\\n        assembly {\\n            let coefficient := shr(exponentSize, bigNumber)\\n            let exponent := and(bigNumber, exponentMask)\\n            normal := shl(exponent, coefficient)\\n        }\\n    }\\n\\n    /// @dev gets the most significant bit `lastBit` of a `normal` number (length of given number of binary format).\\n    /// e.g.\\n    /// 5035703444687813576399584 = 10000101010010110100000011111011110010100110100000000011100101001101001101011100000\\n    /// lastBit =                   ^---------------------------------   83   ----------------------------------------^\\n    function mostSignificantBit(uint256 normal) internal pure returns (uint lastBit) {\\n        assembly {\\n            let number_ := normal\\n            if gt(normal, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x80, number_)\\n                lastBit := 0x80\\n            }\\n            if gt(number_, 0xFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x40, number_)\\n                lastBit := add(lastBit, 0x40)\\n            }\\n            if gt(number_, 0xFFFFFFFF) {\\n                number_ := shr(0x20, number_)\\n                lastBit := add(lastBit, 0x20)\\n            }\\n            if gt(number_, 0xFFFF) {\\n                number_ := shr(0x10, number_)\\n                lastBit := add(lastBit, 0x10)\\n            }\\n            if gt(number_, 0xFF) {\\n                number_ := shr(0x8, number_)\\n                lastBit := add(lastBit, 0x8)\\n            }\\n            if gt(number_, 0xF) {\\n                number_ := shr(0x4, number_)\\n                lastBit := add(lastBit, 0x4)\\n            }\\n            if gt(number_, 0x3) {\\n                number_ := shr(0x2, number_)\\n                lastBit := add(lastBit, 0x2)\\n            }\\n            if gt(number_, 0x1) {\\n                lastBit := add(lastBit, 1)\\n            }\\n            if gt(number_, 0) {\\n                lastBit := add(lastBit, 1)\\n            }\\n        }\\n    }\\n\\n    /// @dev gets the least significant bit `firstBit` of a `normal` number (position of rightmost 1 in binary format).\\n    /// e.g.\\n    /// 5035703444687813576399584 = 10000101010010110100000011111011110010100110100000000011100101001101001101011100000\\n    /// firstBit =                                                                                               ^-6--^\\n    function leastSignificantBit(uint256 normal) internal pure returns (uint firstBit) {\\n        assembly {\\n            // If number is 0, revert as there is no least significant bit\\n            if iszero(normal) {\\n                revert(0, 0)\\n            }\\n\\n            // Find first set bit using binary search\\n            let number_ := normal\\n            firstBit := 0\\n\\n            // Check if lower 128 bits are all zero\\n            if iszero(and(number_, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) {\\n                number_ := shr(0x80, number_)\\n                firstBit := 0x80\\n            }\\n            // Check if lower 64 bits are all zero\\n            if iszero(and(number_, 0xFFFFFFFFFFFFFFFF)) {\\n                number_ := shr(0x40, number_)\\n                firstBit := add(firstBit, 0x40)\\n            }\\n            // Check if lower 32 bits are all zero\\n            if iszero(and(number_, 0xFFFFFFFF)) {\\n                number_ := shr(0x20, number_)\\n                firstBit := add(firstBit, 0x20)\\n            }\\n            // Check if lower 16 bits are all zero\\n            if iszero(and(number_, 0xFFFF)) {\\n                number_ := shr(0x10, number_)\\n                firstBit := add(firstBit, 0x10)\\n            }\\n            // Check if lower 8 bits are all zero\\n            if iszero(and(number_, 0xFF)) {\\n                number_ := shr(0x8, number_)\\n                firstBit := add(firstBit, 0x8)\\n            }\\n            // Check if lower 4 bits are all zero\\n            if iszero(and(number_, 0xF)) {\\n                number_ := shr(0x4, number_)\\n                firstBit := add(firstBit, 0x4)\\n            }\\n            // Check if lower 2 bits are all zero\\n            if iszero(and(number_, 0x3)) {\\n                number_ := shr(0x2, number_)\\n                firstBit := add(firstBit, 0x2)\\n            }\\n            // Check if lowest bit is zero\\n            if iszero(and(number_, 0x1)) {\\n                firstBit := add(firstBit, 1)\\n            }\\n            // Add 1 to match the 1-based position counting\\n            firstBit := add(firstBit, 1)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa3a52426cd052e70cdfe2e69d40430a26073971b8defaa9a6f31112b4f03600e\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/dexLiteSlotsLink.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.29;\\n\\n/// @notice library that helps in reading / working with storage slot data of Fluid Dex Lite.\\nlibrary DexLiteSlotsLink {\\n    /// @dev storage slot for is auth mapping\\n    uint256 internal constant DEX_LITE_IS_AUTH_SLOT = 0;\\n    /// @dev storage slot for is dex variables\\n    uint256 internal constant DEX_LITE_DEX_VARIABLES_SLOT = 1;\\n    /// @dev storage slot for center price shift\\n    uint256 internal constant DEX_LITE_CENTER_PRICE_SHIFT_SLOT = 2;\\n    /// @dev storage slot for range shift\\n    uint256 internal constant DEX_LITE_RANGE_SHIFT_SLOT = 3;\\n    /// @dev storage slot for threshold shift\\n    uint256 internal constant DEX_LITE_THRESHOLD_SHIFT_SLOT = 4;\\n\\n    // --------------------------------\\n    // @dev stacked uint256 storage slots bits position data for each:\\n\\n    // DexVariables\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_FEE = 0;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_REVENUE_CUT = 13;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_REBALANCING_STATUS = 20;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_CENTER_PRICE_SHIFT_ACTIVE = 22;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_CENTER_PRICE = 23;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_CENTER_PRICE_CONTRACT_ADDRESS = 63;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_RANGE_PERCENT_SHIFT_ACTIVE = 82;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_UPPER_PERCENT = 83;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_LOWER_PERCENT = 97;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_THRESHOLD_PERCENT_SHIFT_ACTIVE = 111;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_UPPER_SHIFT_THRESHOLD_PERCENT = 112;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_LOWER_SHIFT_THRESHOLD_PERCENT = 119;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_TOKEN_0_DECIMALS = 126;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_TOKEN_1_DECIMALS = 131;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_TOKEN_0_TOTAL_SUPPLY_ADJUSTED = 136;\\n    uint256 internal constant BITS_DEX_LITE_DEX_VARIABLES_TOKEN_1_TOTAL_SUPPLY_ADJUSTED = 196;\\n\\n    // CenterPriceShift\\n    uint256 internal constant BITS_DEX_LITE_CENTER_PRICE_SHIFT_LAST_INTERACTION_TIMESTAMP = 0;\\n    uint256 internal constant BITS_DEX_LITE_CENTER_PRICE_SHIFT_SHIFTING_TIME = 33;\\n    uint256 internal constant BITS_DEX_LITE_CENTER_PRICE_SHIFT_MAX_CENTER_PRICE = 57;\\n    uint256 internal constant BITS_DEX_LITE_CENTER_PRICE_SHIFT_MIN_CENTER_PRICE = 85;\\n    uint256 internal constant BITS_DEX_LITE_CENTER_PRICE_SHIFT_PERCENT = 113;\\n    uint256 internal constant BITS_DEX_LITE_CENTER_PRICE_SHIFT_TIME_TO_SHIFT = 133;\\n    uint256 internal constant BITS_DEX_LITE_CENTER_PRICE_SHIFT_TIMESTAMP = 153;\\n\\n    // RangeShift\\n    uint256 internal constant BITS_DEX_LITE_RANGE_SHIFT_OLD_UPPER_RANGE_PERCENT = 0;\\n    uint256 internal constant BITS_DEX_LITE_RANGE_SHIFT_OLD_LOWER_RANGE_PERCENT = 14;\\n    uint256 internal constant BITS_DEX_LITE_RANGE_SHIFT_TIME_TO_SHIFT = 28;\\n    uint256 internal constant BITS_DEX_LITE_RANGE_SHIFT_TIMESTAMP = 48;\\n\\n    // ThresholdShift\\n    uint256 internal constant BITS_DEX_LITE_THRESHOLD_SHIFT_OLD_UPPER_THRESHOLD_PERCENT = 0;\\n    uint256 internal constant BITS_DEX_LITE_THRESHOLD_SHIFT_OLD_LOWER_THRESHOLD_PERCENT = 7;\\n    uint256 internal constant BITS_DEX_LITE_THRESHOLD_SHIFT_TIME_TO_SHIFT = 14;\\n    uint256 internal constant BITS_DEX_LITE_THRESHOLD_SHIFT_TIMESTAMP = 34;\\n\\n    // --------------------------------\\n    // @dev stacked uint256 swapData for LogSwap event\\n    uint256 internal constant BITS_DEX_LITE_SWAP_DATA_SWAP_0_TO_1 = 0;\\n    uint256 internal constant BITS_DEX_LITE_SWAP_DATA_AMOUNT_IN = 1;\\n    uint256 internal constant BITS_DEX_LITE_SWAP_DATA_AMOUNT_OUT = 61;\\n\\n    /// @notice Calculating the slot ID for Dex contract for single mapping at `slot_` for `key_`\\n    function calculateMappingStorageSlot(uint256 slot_, bytes32 key_) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(key_, slot_));\\n    }\\n}\\n\",\"keccak256\":\"0x478e92e9ee3dea018bd394dc9fbf4fab04421de1546f488138cf8a3de404eba5\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.21 <=0.8.29;\\n\\nlibrary LibsErrorTypes {\\n    /***********************************|\\n    |         LiquidityCalcs            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when supply or borrow exchange price is zero at calc token data (token not configured yet)\\n    uint256 internal constant LiquidityCalcs__ExchangePriceZero = 70001;\\n\\n    /// @notice thrown when rate data is set to a version that is not implemented\\n    uint256 internal constant LiquidityCalcs__UnsupportedRateVersion = 70002;\\n\\n    /// @notice thrown when the calculated borrow rate turns negative. This should never happen.\\n    uint256 internal constant LiquidityCalcs__BorrowRateNegative = 70003;\\n\\n    /***********************************|\\n    |           SafeTransfer            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe transfer from for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFromFailed = 71001;\\n\\n    /// @notice thrown when safe transfer for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFailed = 71002;\\n\\n    /***********************************|\\n    |           SafeApprove             | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe approve from for an ERC20 fails\\n    uint256 internal constant SafeApprove__ApproveFailed = 81001;\\n}\\n\",\"keccak256\":\"0x4ae8d510a4119e20698381f323270ba219e66c03872e23073afff841e9b93a52\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/reentrancyLock.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.29;\\n\\nlibrary ReentrancyLock {\\n    // bytes32(uint256(keccak256(\\\"FLUID_REENTRANCY_LOCK\\\")) - 1)\\n    bytes32 constant REENTRANCY_LOCK_SLOT = 0xb9cde754d19acfff2b3ccabc66f256d3563a0bc5805da4205f01a9bda38a2df7;\\n\\n    function lock() internal {\\n        assembly {\\n            if tload(REENTRANCY_LOCK_SLOT) { revert(0, 0) }\\n            tstore(REENTRANCY_LOCK_SLOT, 1)\\n        }\\n    }\\n\\n    function unlock() internal {\\n        assembly { tstore(REENTRANCY_LOCK_SLOT, 0) }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4ed6908f938d26f16af8c42101a4049ec556648329d4e5240f5ae9281e497c\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/safeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.21 <=0.8.29;\\n\\nimport { LibsErrorTypes as ErrorTypes } from \\\"./errorTypes.sol\\\";\\n\\n/// @notice provides minimalistic methods for safe transfers, e.g. ERC20 safeTransferFrom\\nlibrary SafeTransfer {\\n    uint256 internal constant MAX_NATIVE_TRANSFER_GAS = 20000; // pass max. 20k gas for native transfers\\n\\n    error FluidSafeTransferError(uint256 errorId_);\\n\\n    /// @dev Transfer `amount_` of `token_` from `from_` to `to_`, spending the approval given by `from_` to the\\n    /// calling contract. If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L31-L63\\n    function safeTransferFrom(address token_, address from_, address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from_\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to_\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount_) // Append the \\\"amount_\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success_ := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token_, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFromFailed);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount_` of `token_` to `to_`.\\n    /// If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L65-L95\\n    function safeTransfer(address token_, address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to_\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount_) // Append the \\\"amount_\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success_ := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token_, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFailed);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount_` of ` native token to `to_`.\\n    /// Minimally modified from Solmate SafeTransferLib (Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L15-L25\\n    function safeTransferNative(address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not. Pass limited gas\\n            success_ := call(MAX_NATIVE_TRANSFER_GAS, to_, amount_, 0, 0, 0, 0)\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFailed);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd90c1f318d09b4d897c53e0c667bd297a55dd5317e6763499c93d20c1adf7c6d\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/liquidity/adminModule/structs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.21 <=0.8.29;\\n\\nabstract contract Structs {\\n    struct AddressBool {\\n        address addr;\\n        bool value;\\n    }\\n\\n    struct AddressUint256 {\\n        address addr;\\n        uint256 value;\\n    }\\n\\n    /// @notice struct to set borrow rate data for version 1\\n    struct RateDataV1Params {\\n        ///\\n        /// @param token for rate data\\n        address token;\\n        ///\\n        /// @param kink in borrow rate. in 1e2: 100% = 10_000; 1% = 100\\n        /// utilization below kink usually means slow increase in rate, once utilization is above kink borrow rate increases fast\\n        uint256 kink;\\n        ///\\n        /// @param rateAtUtilizationZero desired borrow rate when utilization is zero. in 1e2: 100% = 10_000; 1% = 100\\n        /// i.e. constant minimum borrow rate\\n        /// e.g. at utilization = 0.01% rate could still be at least 4% (rateAtUtilizationZero would be 400 then)\\n        uint256 rateAtUtilizationZero;\\n        ///\\n        /// @param rateAtUtilizationKink borrow rate when utilization is at kink. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 7% at kink then rateAtUtilizationKink would be 700\\n        uint256 rateAtUtilizationKink;\\n        ///\\n        /// @param rateAtUtilizationMax borrow rate when utilization is maximum at 100%. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 125% at 100% then rateAtUtilizationMax would be 12_500\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    /// @notice struct to set borrow rate data for version 2\\n    struct RateDataV2Params {\\n        ///\\n        /// @param token for rate data\\n        address token;\\n        ///\\n        /// @param kink1 first kink in borrow rate. in 1e2: 100% = 10_000; 1% = 100\\n        /// utilization below kink 1 usually means slow increase in rate, once utilization is above kink 1 borrow rate increases faster\\n        uint256 kink1;\\n        ///\\n        /// @param kink2 second kink in borrow rate. in 1e2: 100% = 10_000; 1% = 100\\n        /// utilization below kink 2 usually means slow / medium increase in rate, once utilization is above kink 2 borrow rate increases fast\\n        uint256 kink2;\\n        ///\\n        /// @param rateAtUtilizationZero desired borrow rate when utilization is zero. in 1e2: 100% = 10_000; 1% = 100\\n        /// i.e. constant minimum borrow rate\\n        /// e.g. at utilization = 0.01% rate could still be at least 4% (rateAtUtilizationZero would be 400 then)\\n        uint256 rateAtUtilizationZero;\\n        ///\\n        /// @param rateAtUtilizationKink1 desired borrow rate when utilization is at first kink. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 7% at first kink then rateAtUtilizationKink would be 700\\n        uint256 rateAtUtilizationKink1;\\n        ///\\n        /// @param rateAtUtilizationKink2 desired borrow rate when utilization is at second kink. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 7% at second kink then rateAtUtilizationKink would be 1_200\\n        uint256 rateAtUtilizationKink2;\\n        ///\\n        /// @param rateAtUtilizationMax desired borrow rate when utilization is maximum at 100%. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 125% at 100% then rateAtUtilizationMax would be 12_500\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    /// @notice struct to set token config\\n    struct TokenConfig {\\n        ///\\n        /// @param token address\\n        address token;\\n        ///\\n        /// @param fee charges on borrower's interest. in 1e2: 100% = 10_000; 1% = 100\\n        uint256 fee;\\n        ///\\n        /// @param threshold on when to update the storage slot. in 1e2: 100% = 10_000; 1% = 100\\n        uint256 threshold;\\n        ///\\n        /// @param maxUtilization maximum allowed utilization. in 1e2: 100% = 10_000; 1% = 100\\n        ///                       set to 100% to disable and have default limit of 100% (avoiding SLOAD).\\n        uint256 maxUtilization;\\n    }\\n\\n    /// @notice struct to set user supply & withdrawal config\\n    struct UserSupplyConfig {\\n        ///\\n        /// @param user address\\n        address user;\\n        ///\\n        /// @param token address\\n        address token;\\n        ///\\n        /// @param mode: 0 = without interest. 1 = with interest\\n        uint8 mode;\\n        ///\\n        /// @param expandPercent withdrawal limit expand percent. in 1e2: 100% = 10_000; 1% = 100\\n        /// Also used to calculate rate at which withdrawal limit should decrease (instant).\\n        uint256 expandPercent;\\n        ///\\n        /// @param expandDuration withdrawal limit expand duration in seconds.\\n        /// used to calculate rate together with expandPercent\\n        uint256 expandDuration;\\n        ///\\n        /// @param baseWithdrawalLimit base limit, below this, user can withdraw the entire amount.\\n        /// amount in raw (to be multiplied with exchange price) or normal depends on configured mode in user config for the token:\\n        /// with interest -> raw, without interest -> normal\\n        uint256 baseWithdrawalLimit;\\n    }\\n\\n    /// @notice struct to set user borrow & payback config\\n    struct UserBorrowConfig {\\n        ///\\n        /// @param user address\\n        address user;\\n        ///\\n        /// @param token address\\n        address token;\\n        ///\\n        /// @param mode: 0 = without interest. 1 = with interest\\n        uint8 mode;\\n        ///\\n        /// @param expandPercent debt limit expand percent. in 1e2: 100% = 10_000; 1% = 100\\n        /// Also used to calculate rate at which debt limit should decrease (instant).\\n        uint256 expandPercent;\\n        ///\\n        /// @param expandDuration debt limit expand duration in seconds.\\n        /// used to calculate rate together with expandPercent\\n        uint256 expandDuration;\\n        ///\\n        /// @param baseDebtCeiling base borrow limit. until here, borrow limit remains as baseDebtCeiling\\n        /// (user can borrow until this point at once without stepped expansion). Above this, automated limit comes in place.\\n        /// amount in raw (to be multiplied with exchange price) or normal depends on configured mode in user config for the token:\\n        /// with interest -> raw, without interest -> normal\\n        uint256 baseDebtCeiling;\\n        ///\\n        /// @param maxDebtCeiling max borrow ceiling, maximum amount the user can borrow.\\n        /// amount in raw (to be multiplied with exchange price) or normal depends on configured mode in user config for the token:\\n        /// with interest -> raw, without interest -> normal\\n        uint256 maxDebtCeiling;\\n    }\\n}\\n\",\"keccak256\":\"0xfa7cbe07b97f45acd0460deaff1ef54de9473164249e5527ee4da6efb6bf7e65\",\"license\":\"BUSL-1.1\"},\"contracts/liquidity/interfaces/iLiquidity.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.21 <=0.8.29;\\n\\nimport { IProxy } from \\\"../../infiniteProxy/interfaces/iProxy.sol\\\";\\nimport { Structs as AdminModuleStructs } from \\\"../adminModule/structs.sol\\\";\\n\\ninterface IFluidLiquidityAdmin {\\n    /// @notice adds/removes auths. Auths generally could be contracts which can have restricted actions defined on contract.\\n    ///         auths can be helpful in reducing governance overhead where it's not needed.\\n    /// @param authsStatus_ array of structs setting allowed status for an address.\\n    ///                     status true => add auth, false => remove auth\\n    function updateAuths(AdminModuleStructs.AddressBool[] calldata authsStatus_) external;\\n\\n    /// @notice adds/removes guardians. Only callable by Governance.\\n    /// @param guardiansStatus_ array of structs setting allowed status for an address.\\n    ///                         status true => add guardian, false => remove guardian\\n    function updateGuardians(AdminModuleStructs.AddressBool[] calldata guardiansStatus_) external;\\n\\n    /// @notice changes the revenue collector address (contract that is sent revenue). Only callable by Governance.\\n    /// @param revenueCollector_  new revenue collector address\\n    function updateRevenueCollector(address revenueCollector_) external;\\n\\n    /// @notice changes current status, e.g. for pausing or unpausing all user operations. Only callable by Auths.\\n    /// @param newStatus_ new status\\n    ///        status = 2 -> pause, status = 1 -> resume.\\n    function changeStatus(uint256 newStatus_) external;\\n\\n    /// @notice                  update tokens rate data version 1. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV1Params with rate data to set for each token\\n    function updateRateDataV1s(AdminModuleStructs.RateDataV1Params[] calldata tokensRateData_) external;\\n\\n    /// @notice                  update tokens rate data version 2. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV2Params with rate data to set for each token\\n    function updateRateDataV2s(AdminModuleStructs.RateDataV2Params[] calldata tokensRateData_) external;\\n\\n    /// @notice updates token configs: fee charge on borrowers interest & storage update utilization threshold.\\n    ///         Only callable by Auths.\\n    /// @param tokenConfigs_ contains token address, fee & utilization threshold\\n    function updateTokenConfigs(AdminModuleStructs.TokenConfig[] calldata tokenConfigs_) external;\\n\\n    /// @notice updates user classes: 0 is for new protocols, 1 is for established protocols.\\n    ///         Only callable by Auths.\\n    /// @param userClasses_ struct array of uint256 value to assign for each user address\\n    function updateUserClasses(AdminModuleStructs.AddressUint256[] calldata userClasses_) external;\\n\\n    /// @notice sets user supply configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userSupplyConfigs_ struct array containing user supply config, see `UserSupplyConfig` struct for more info\\n    function updateUserSupplyConfigs(AdminModuleStructs.UserSupplyConfig[] memory userSupplyConfigs_) external;\\n\\n    /// @notice sets a new withdrawal limit as the current limit for a certain user\\n    /// @param user_ user address for which to update the withdrawal limit\\n    /// @param token_ token address for which to update the withdrawal limit\\n    /// @param newLimit_ new limit until which user supply can decrease to.\\n    ///                  Important: input in raw. Must account for exchange price in input param calculation.\\n    ///                  Note any limit that is < max expansion or > current user supply will set max expansion limit or\\n    ///                  current user supply as limit respectively.\\n    ///                  - set 0 to make maximum possible withdrawable: instant full expansion, and if that goes\\n    ///                  below base limit then fully down to 0.\\n    ///                  - set type(uint256).max to make current withdrawable 0 (sets current user supply as limit).\\n    function updateUserWithdrawalLimit(address user_, address token_, uint256 newLimit_) external;\\n\\n    /// @notice setting user borrow configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userBorrowConfigs_ struct array containing user borrow config, see `UserBorrowConfig` struct for more info\\n    function updateUserBorrowConfigs(AdminModuleStructs.UserBorrowConfig[] memory userBorrowConfigs_) external;\\n\\n    /// @notice pause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to pause operations for\\n    /// @param supplyTokens_  token addresses to pause withdrawals for\\n    /// @param borrowTokens_  token addresses to pause borrowings for\\n    function pauseUser(address user_, address[] calldata supplyTokens_, address[] calldata borrowTokens_) external;\\n\\n    /// @notice unpause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to unpause operations for\\n    /// @param supplyTokens_  token addresses to unpause withdrawals for\\n    /// @param borrowTokens_  token addresses to unpause borrowings for\\n    function unpauseUser(address user_, address[] calldata supplyTokens_, address[] calldata borrowTokens_) external;\\n\\n    /// @notice         collects revenue for tokens to configured revenueCollector address.\\n    /// @param tokens_  array of tokens to collect revenue for\\n    /// @dev            Note that this can revert if token balance is < revenueAmount (utilization > 100%)\\n    function collectRevenue(address[] calldata tokens_) external;\\n\\n    /// @notice gets the current updated exchange prices for n tokens and updates all prices, rates related data in storage.\\n    /// @param tokens_ tokens to update exchange prices for\\n    /// @return supplyExchangePrices_ new supply rates of overall system for each token\\n    /// @return borrowExchangePrices_ new borrow rates of overall system for each token\\n    function updateExchangePrices(\\n        address[] calldata tokens_\\n    ) external returns (uint256[] memory supplyExchangePrices_, uint256[] memory borrowExchangePrices_);\\n}\\n\\ninterface IFluidLiquidityLogic is IFluidLiquidityAdmin {\\n    /// @notice Single function which handles supply, withdraw, borrow & payback\\n    /// @param token_ address of token (0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE for native)\\n    /// @param supplyAmount_ if +ve then supply, if -ve then withdraw, if 0 then nothing\\n    /// @param borrowAmount_ if +ve then borrow, if -ve then payback, if 0 then nothing\\n    /// @param withdrawTo_ if withdrawal then to which address\\n    /// @param borrowTo_ if borrow then to which address\\n    /// @param callbackData_ callback data passed to `liquidityCallback` method of protocol\\n    /// @return memVar3_ updated supplyExchangePrice\\n    /// @return memVar4_ updated borrowExchangePrice\\n    /// @dev to trigger skipping in / out transfers (gas optimization):\\n    /// -  ` callbackData_` MUST be encoded so that \\\"from\\\" address is the last 20 bytes in the last 32 bytes slot,\\n    ///     also for native token operations where liquidityCallback is not triggered!\\n    ///     from address must come at last position if there is more data. I.e. encode like:\\n    ///     abi.encode(otherVar1, otherVar2, FROM_ADDRESS). Note dynamic types used with abi.encode come at the end\\n    ///     so if dynamic types are needed, you must use abi.encodePacked to ensure the from address is at the end.\\n    /// -   this \\\"from\\\" address must match withdrawTo_ or borrowTo_ and must be == `msg.sender`\\n    /// -   `callbackData_` must in addition to the from address as described above include bytes32 SKIP_TRANSFERS\\n    ///     in the slot before (bytes 32 to 63)\\n    /// -   `msg.value` must be 0.\\n    /// -   Amounts must be either:\\n    ///     -  supply(+) == borrow(+), withdraw(-) == payback(-).\\n    ///     -  Liquidity must be on the winning side (deposit < borrow OR payback < withdraw).\\n    function operate(\\n        address token_,\\n        int256 supplyAmount_,\\n        int256 borrowAmount_,\\n        address withdrawTo_,\\n        address borrowTo_,\\n        bytes calldata callbackData_\\n    ) external payable returns (uint256 memVar3_, uint256 memVar4_);\\n}\\n\\ninterface IFluidLiquidity is IProxy, IFluidLiquidityLogic {}\\n\",\"keccak256\":\"0x0663d7d5d615bebc45eed1c986edff7d86e15ef15e75d2c1ce45fbf4502aaf03\",\"license\":\"MIT\"},\"contracts/protocols/dexLite/core/coreInternals.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.29;\\n\\nimport \\\"./helpers.sol\\\";\\n\\nabstract contract CoreInternals is Helpers {\\n    function _swapIn(\\n        DexKey calldata dexKey_,\\n        bool swap0To1_,\\n        uint256 amountIn_\\n    ) internal returns (uint256 amountOut_) {\\n        bytes32 dexId_ = keccak256(abi.encode(dexKey_));\\n        uint256 dexVariables_ = _dexVariables[dexId_];\\n\\n        if (dexVariables_ == 0) revert DexNotInitialized(dexId_);\\n\\n        uint256 token0AdjustedSupply_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_0_TOTAL_SUPPLY_ADJUSTED) & X60;\\n        uint256 token1AdjustedSupply_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_1_TOTAL_SUPPLY_ADJUSTED) & X60;\\n        (uint256 centerPrice_, uint256 token0ImaginaryReserves_, uint256 token1ImaginaryReserves_) = \\n            _getPricesAndReserves(dexKey_, dexVariables_, dexId_, token0AdjustedSupply_, token1AdjustedSupply_);\\n\\n        if (swap0To1_) {\\n            uint256 amountInAdjusted_;\\n            uint256 amountOutAdjusted_;\\n            unchecked {\\n                uint256 token0Decimals_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_0_DECIMALS) & X5;\\n                if (token0Decimals_ > TOKENS_DECIMALS_PRECISION) amountInAdjusted_ = amountIn_ / (10 ** (token0Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                else amountInAdjusted_ = amountIn_ * (10 ** (TOKENS_DECIMALS_PRECISION - token0Decimals_));\\n            }\\n\\n            _verifySwap(amountInAdjusted_, amountIn_, token0ImaginaryReserves_);\\n\\n            unchecked {\\n                uint256 fee_ = (amountInAdjusted_ * ((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_FEE) & X13)) / SIX_DECIMALS;\\n                amountOutAdjusted_ = _getAmountOut(\\n                    amountInAdjusted_ - fee_,\\n                    token0ImaginaryReserves_, \\n                    token1ImaginaryReserves_\\n                );\\n                token0AdjustedSupply_ += amountInAdjusted_ - ((fee_ * ((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_REVENUE_CUT) & X7)) / TWO_DECIMALS);\\n            }\\n            token1AdjustedSupply_ -= amountOutAdjusted_;\\n\\n            _verifyToken1Reserves(\\n                token0AdjustedSupply_,\\n                token1AdjustedSupply_,\\n                centerPrice_\\n            );\\n            unchecked {\\n                uint256 token1Decimals_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_1_DECIMALS) & X5;\\n                if (token1Decimals_ > TOKENS_DECIMALS_PRECISION) amountOut_ = amountOutAdjusted_ * (10 ** (token1Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                else amountOut_ = amountOutAdjusted_ / (10 ** (TOKENS_DECIMALS_PRECISION - token1Decimals_));\\n            }\\n        } else {\\n            uint256 amountInAdjusted_;\\n            uint256 amountOutAdjusted_;\\n            unchecked {\\n                uint256 token1Decimals_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_1_DECIMALS) & X5;\\n                if (token1Decimals_ > TOKENS_DECIMALS_PRECISION) amountInAdjusted_ = amountIn_ / (10 ** (token1Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                else amountInAdjusted_ = amountIn_ * (10 ** (TOKENS_DECIMALS_PRECISION - token1Decimals_));\\n            }\\n\\n            _verifySwap(amountInAdjusted_, amountIn_, token1ImaginaryReserves_);\\n            \\n            unchecked { \\n                uint256 fee_ = (amountInAdjusted_ * ((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_FEE) & X13)) / SIX_DECIMALS;\\n                amountOutAdjusted_ = _getAmountOut(\\n                    amountInAdjusted_ - fee_,\\n                    token1ImaginaryReserves_, \\n                    token0ImaginaryReserves_\\n                );\\n                token1AdjustedSupply_ += amountInAdjusted_ - ((fee_ * ((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_REVENUE_CUT) & X7)) / TWO_DECIMALS);\\n            }\\n            token0AdjustedSupply_ -= amountOutAdjusted_;\\n\\n            _verifyToken0Reserves(\\n                token0AdjustedSupply_,\\n                token1AdjustedSupply_,\\n                centerPrice_\\n            );\\n\\n            unchecked {\\n                uint256 token0Decimals_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_0_DECIMALS) & X5;\\n                if (token0Decimals_ > TOKENS_DECIMALS_PRECISION) amountOut_ = amountOutAdjusted_ * (10 ** (token0Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                else amountOut_ = amountOutAdjusted_ / (10 ** (TOKENS_DECIMALS_PRECISION - token0Decimals_));\\n            }\\n        }\\n\\n        {\\n            uint256 rebalancingStatus_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_REBALANCING_STATUS) & X2;\\n            if (rebalancingStatus_ > 0) {\\n                // rebalancing is active\\n                uint256 price_;\\n                unchecked {\\n                    uint256 token0Decimals_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_0_DECIMALS) & X5;\\n                    uint256 token1Decimals_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_1_DECIMALS) & X5;\\n\\n                    if (swap0To1_) {\\n                        uint256 amountInAdjusted_;\\n                        uint256 amountOutAdjusted_;\\n\\n                        if (token0Decimals_ > TOKENS_DECIMALS_PRECISION) amountInAdjusted_ = amountIn_ / (10 ** (token0Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                        else amountInAdjusted_ = amountIn_ * (10 ** (TOKENS_DECIMALS_PRECISION - token0Decimals_));\\n\\n                        if (token1Decimals_ > TOKENS_DECIMALS_PRECISION) amountOutAdjusted_ = amountOut_ / (10 ** (token1Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                        else amountOutAdjusted_ = amountOut_ * (10 ** (TOKENS_DECIMALS_PRECISION - token1Decimals_));\\n\\n                        price_ = (token1ImaginaryReserves_ - amountOutAdjusted_) * PRICE_PRECISION / (token0ImaginaryReserves_ + amountInAdjusted_);\\n                    } else {\\n                        uint256 amountInAdjusted_;\\n                        uint256 amountOutAdjusted_;\\n\\n                        if (token1Decimals_ > TOKENS_DECIMALS_PRECISION) amountInAdjusted_ = amountIn_ / (10 ** (token1Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                        else amountInAdjusted_ = amountIn_ * (10 ** (TOKENS_DECIMALS_PRECISION - token1Decimals_));\\n\\n                        if (token0Decimals_ > TOKENS_DECIMALS_PRECISION) amountOutAdjusted_ = amountOut_ / (10 ** (token0Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                        else amountOutAdjusted_ = amountOut_ * (10 ** (TOKENS_DECIMALS_PRECISION - token0Decimals_));\\n\\n                        price_ = (token1ImaginaryReserves_ + amountInAdjusted_) * PRICE_PRECISION / (token0ImaginaryReserves_ - amountOutAdjusted_);\\n                    }\\n                }\\n                rebalancingStatus_ = _setRebalancingStatus(dexVariables_, dexId_, rebalancingStatus_, price_, centerPrice_);\\n            }\\n            if (rebalancingStatus_ > 1 || ((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_CENTER_PRICE_SHIFT_ACTIVE) & X1) == 1) {\\n                _centerPriceShift[dexId_] = _centerPriceShift[dexId_] & ~(X33 << DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_LAST_INTERACTION_TIMESTAMP) | \\n                    (block.timestamp << DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_LAST_INTERACTION_TIMESTAMP);\\n            }\\n        }\\n\\n        if (token0AdjustedSupply_ > X60 || token1AdjustedSupply_ > X60) {\\n            revert AdjustedSupplyOverflow(dexId_, token0AdjustedSupply_, token1AdjustedSupply_);\\n        }\\n\\n        _dexVariables[dexId_] = _dexVariables[dexId_] & ~(X120 << DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_0_TOTAL_SUPPLY_ADJUSTED) | \\n            (token0AdjustedSupply_ << DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_0_TOTAL_SUPPLY_ADJUSTED) | \\n            (token1AdjustedSupply_ << DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_1_TOTAL_SUPPLY_ADJUSTED);\\n\\n        emit LogSwap(dexId_, \\n            ((swap0To1_ ? uint256(0) : uint256(1)) << DSL.BITS_DEX_LITE_SWAP_DATA_SWAP_0_TO_1) | \\n            (amountIn_ << DSL.BITS_DEX_LITE_SWAP_DATA_AMOUNT_IN) | \\n            (amountOut_ << DSL.BITS_DEX_LITE_SWAP_DATA_AMOUNT_OUT)\\n        );\\n    }\\n\\n    function _swapOut(\\n        DexKey calldata dexKey_,\\n        bool swap0To1_,\\n        uint256 amountOut_\\n    ) internal returns (uint256 amountIn_) {\\n        bytes32 dexId_ = keccak256(abi.encode(dexKey_));\\n        uint256 dexVariables_ = _dexVariables[dexId_];\\n\\n        if (dexVariables_ == 0) revert DexNotInitialized(dexId_);\\n    \\n        uint256 token0AdjustedSupply_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_0_TOTAL_SUPPLY_ADJUSTED) & X60;\\n        uint256 token1AdjustedSupply_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_1_TOTAL_SUPPLY_ADJUSTED) & X60;\\n        (uint256 centerPrice_, uint256 token0ImaginaryReserves_, uint256 token1ImaginaryReserves_) = \\n            _getPricesAndReserves(dexKey_, dexVariables_, dexId_, token0AdjustedSupply_, token1AdjustedSupply_);\\n\\n        if (swap0To1_) {\\n            uint256 amountInAdjusted_;\\n            uint256 amountOutAdjusted_;\\n            unchecked {\\n                uint256 token1Decimals_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_1_DECIMALS) & X5;\\n                if (token1Decimals_ > TOKENS_DECIMALS_PRECISION) amountOutAdjusted_ = amountOut_ / (10 ** (token1Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                else amountOutAdjusted_ = amountOut_ * (10 ** (TOKENS_DECIMALS_PRECISION - token1Decimals_));\\n            }\\n\\n            _verifySwap(amountOutAdjusted_, amountOut_, token1ImaginaryReserves_);\\n\\n            amountInAdjusted_ = _getAmountIn(\\n                amountOutAdjusted_,\\n                token0ImaginaryReserves_, \\n                token1ImaginaryReserves_\\n            );\\n            unchecked { \\n                uint256 fee_ = ((amountInAdjusted_ * SIX_DECIMALS) / (SIX_DECIMALS - ((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_FEE) & X13))) - amountInAdjusted_;\\n                amountInAdjusted_ += fee_;\\n                token0AdjustedSupply_ += amountInAdjusted_ - ((fee_ * ((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_REVENUE_CUT) & X7)) / TWO_DECIMALS);\\n            }\\n            token1AdjustedSupply_ -= amountOutAdjusted_;\\n\\n            _verifyToken1Reserves(\\n                token0AdjustedSupply_,\\n                token1AdjustedSupply_,\\n                centerPrice_\\n            );\\n            unchecked {\\n                uint256 token0Decimals_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_0_DECIMALS) & X5;\\n                if (token0Decimals_ > TOKENS_DECIMALS_PRECISION) amountIn_ = amountInAdjusted_ * (10 ** (token0Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                else amountIn_ = amountInAdjusted_ / (10 ** (TOKENS_DECIMALS_PRECISION - token0Decimals_));\\n            }\\n        } else {\\n            uint256 amountInAdjusted_;\\n            uint256 amountOutAdjusted_;\\n            unchecked {\\n                uint256 token0Decimals_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_0_DECIMALS) & X5;\\n                if (token0Decimals_ > TOKENS_DECIMALS_PRECISION) amountOutAdjusted_ = amountOut_ / (10 ** (token0Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                else amountOutAdjusted_ = amountOut_ * (10 ** (TOKENS_DECIMALS_PRECISION - token0Decimals_));\\n            }\\n\\n            _verifySwap(amountOutAdjusted_, amountOut_, token0ImaginaryReserves_);\\n\\n            amountInAdjusted_ = _getAmountIn(\\n                amountOutAdjusted_,\\n                token1ImaginaryReserves_, \\n                token0ImaginaryReserves_\\n            );\\n            unchecked { \\n                uint256 fee_ = ((amountInAdjusted_ * SIX_DECIMALS) / (SIX_DECIMALS - ((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_FEE) & X13))) - amountInAdjusted_;\\n                amountInAdjusted_ += fee_;\\n                token1AdjustedSupply_ += amountInAdjusted_ - ((fee_ * ((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_REVENUE_CUT) & X7)) / TWO_DECIMALS);\\n            }\\n            token0AdjustedSupply_ -= amountOutAdjusted_;\\n\\n            _verifyToken0Reserves(\\n                token0AdjustedSupply_,\\n                token1AdjustedSupply_,\\n                centerPrice_\\n            );\\n            unchecked {\\n                uint256 token1Decimals_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_1_DECIMALS) & X5;\\n                if (token1Decimals_ > TOKENS_DECIMALS_PRECISION) amountIn_ = amountInAdjusted_ * (10 ** (token1Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                else amountIn_ = amountInAdjusted_ / (10 ** (TOKENS_DECIMALS_PRECISION - token1Decimals_));\\n            }\\n        }\\n\\n        {\\n            uint256 rebalancingStatus_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_REBALANCING_STATUS) & X2;\\n            if (rebalancingStatus_ > 0) {\\n                // rebalancing is active\\n                uint256 price_;\\n                unchecked {\\n                    uint256 token0Decimals_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_0_DECIMALS) & X5;\\n                    uint256 token1Decimals_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_1_DECIMALS) & X5;\\n\\n                    if (swap0To1_) {\\n                        uint256 amountInAdjusted_;\\n                        uint256 amountOutAdjusted_;\\n\\n                        if (token0Decimals_ > TOKENS_DECIMALS_PRECISION) amountInAdjusted_ = amountIn_ / (10 ** (token0Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                        else amountInAdjusted_ = amountIn_ * (10 ** (TOKENS_DECIMALS_PRECISION - token0Decimals_));\\n\\n                        if (token1Decimals_ > TOKENS_DECIMALS_PRECISION) amountOutAdjusted_ = amountOut_ / (10 ** (token1Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                        else amountOutAdjusted_ = amountOut_ * (10 ** (TOKENS_DECIMALS_PRECISION - token1Decimals_));\\n\\n                        price_ = (token1ImaginaryReserves_ - amountOutAdjusted_) * PRICE_PRECISION / (token0ImaginaryReserves_ + amountInAdjusted_);\\n                    } else {\\n                        uint256 amountInAdjusted_;\\n                        uint256 amountOutAdjusted_;\\n\\n                        if (token1Decimals_ > TOKENS_DECIMALS_PRECISION) amountInAdjusted_ = amountIn_ / (10 ** (token1Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                        else amountInAdjusted_ = amountIn_ * (10 ** (TOKENS_DECIMALS_PRECISION - token1Decimals_));\\n\\n                        if (token0Decimals_ > TOKENS_DECIMALS_PRECISION) amountOutAdjusted_ = amountOut_ / (10 ** (token0Decimals_ - TOKENS_DECIMALS_PRECISION));\\n                        else amountOutAdjusted_ = amountOut_ * (10 ** (TOKENS_DECIMALS_PRECISION - token0Decimals_));\\n\\n                        price_ = (token1ImaginaryReserves_ + amountInAdjusted_) * PRICE_PRECISION / (token0ImaginaryReserves_ - amountOutAdjusted_);\\n                    }\\n                }\\n                rebalancingStatus_ = _setRebalancingStatus(dexVariables_, dexId_, rebalancingStatus_, price_, centerPrice_);\\n            }\\n            if (rebalancingStatus_ > 1 || ((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_CENTER_PRICE_SHIFT_ACTIVE) & X1) == 1) {\\n                _centerPriceShift[dexId_] = _centerPriceShift[dexId_] & ~(X33 << DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_LAST_INTERACTION_TIMESTAMP) | \\n                    (block.timestamp << DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_LAST_INTERACTION_TIMESTAMP);\\n            }\\n        }\\n\\n        if (token0AdjustedSupply_ > X60 || token1AdjustedSupply_ > X60) {\\n            revert AdjustedSupplyOverflow(dexId_, token0AdjustedSupply_, token1AdjustedSupply_);\\n        }\\n\\n        _dexVariables[dexId_] = _dexVariables[dexId_] & ~(X120 << DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_0_TOTAL_SUPPLY_ADJUSTED) | \\n            (token0AdjustedSupply_ << DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_0_TOTAL_SUPPLY_ADJUSTED) | \\n            (token1AdjustedSupply_ << DSL.BITS_DEX_LITE_DEX_VARIABLES_TOKEN_1_TOTAL_SUPPLY_ADJUSTED);\\n        \\n        emit LogSwap(dexId_, \\n            ((swap0To1_ ? uint256(0) : uint256(1)) << DSL.BITS_DEX_LITE_SWAP_DATA_SWAP_0_TO_1) | \\n            (amountIn_ << DSL.BITS_DEX_LITE_SWAP_DATA_AMOUNT_IN) | \\n            (amountOut_ << DSL.BITS_DEX_LITE_SWAP_DATA_AMOUNT_OUT)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3e531f0b12a3b30822491a7d540c4e98488cdb106c63879c97d6c2196ec9e237\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/dexLite/core/errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.29;\\nimport \\\"../other/commonImport.sol\\\";\\n\\n// --- Custom Errors ---\\nerror DexNotInitialized(bytes32 dexId);\\nerror AdjustedSupplyOverflow(bytes32 dexId, uint256 token0AdjustedSupply, uint256 token1AdjustedSupply);\\nerror ZeroAddress();\\nerror InvalidSwapAmounts();\\nerror ExcessiveSwapAmount();\\nerror TokenReservesTooLow();\\nerror InvalidMsgValue();\\nerror InsufficientNativeToken();\\nerror InsufficientERC20();\\nerror DelegateCallFailed();\",\"keccak256\":\"0x8b0a5c9f0b8ca8eae6bcd8a9a8d8de5269302b69586294bc7acd75ae712a774d\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/dexLite/core/helpers.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.29;\\nimport \\\"./errors.sol\\\";\\nimport { DexLiteSlotsLink as DSL } from \\\"../../../libraries/dexLiteSlotsLink.sol\\\";\\nimport { FixedPointMathLib } from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport { AddressCalcs } from \\\"../../../libraries/addressCalcs.sol\\\";\\nimport { BigMathMinified } from \\\"../../../libraries/bigMathMinified.sol\\\";\\nimport { ReentrancyLock } from \\\"../../../libraries/reentrancyLock.sol\\\";\\nimport { SafeTransfer } from \\\"../../../libraries/safeTransfer.sol\\\";\\n\\nabstract contract Helpers is CommonImport {\\n    using BigMathMinified for uint256;\\n\\n    modifier _reentrancyLock() {\\n        ReentrancyLock.lock();\\n        _;\\n        ReentrancyLock.unlock();\\n    }\\n\\n    function _getExtraDataSlot() internal view returns (address extraDataAddress_) {\\n        assembly {\\n            extraDataAddress_ := sload(EXTRA_DATA_SLOT)\\n        }\\n    }\\n\\n    function _getGovernanceAddr() internal view returns (address governance_) {\\n        governance_ = address(uint160(LIQUIDITY.readFromStorage(LIQUIDITY_GOVERNANCE_SLOT)));\\n    }\\n\\n    function _callExtraDataSlot(bytes memory data_) internal {\\n        address extraDataAddress_ = _getExtraDataSlot();\\n        if (extraDataAddress_ == address(0)) revert ZeroAddress();\\n        _spell(extraDataAddress_, data_);\\n    }\\n\\n    /// @dev getting reserves outside range.\\n    /// @param gp_ is geometric mean pricing of upper percent & lower percent\\n    /// @param pa_ price of upper range or lower range\\n    /// @param rx_ real reserves of token0 or token1\\n    /// @param ry_ whatever is rx_ the other will be ry_\\n    function _calculateReservesOutsideRange(uint256 gp_, uint256 pa_, uint256 rx_, uint256 ry_) internal pure returns (uint256 xa_, uint256 yb_) {\\n        // equations we have:\\n        // 1. x*y = k\\n        // 2. xa*ya = k\\n        // 3. xb*yb = k\\n        // 4. Pa = ya / xa = upperRange_ (known)\\n        // 5. Pb = yb / xb = lowerRange_ (known)\\n        // 6. x - xa = rx = real reserve of x (known)\\n        // 7. y - yb = ry = real reserve of y (known)\\n        // With solving we get:\\n        // ((Pa*Pb)^(1/2) - Pa)*xa^2 + (rx * (Pa*Pb)^(1/2) + ry)*xa + rx*ry = 0\\n        // yb = yb = xa * (Pa * Pb)^(1/2)\\n\\n        // xa = (GP\\u22c5rx + ry + (-rx\\u22c5ry\\u22c54\\u22c5(GP - Pa) + (GP\\u22c5rx + ry)^2)^0.5) / (2Pa - 2GP)\\n        // multiply entire equation by 1e27 to remove the price decimals precision of 1e27\\n        // xa = (GP\\u22c5rx + ry\\u22c51e27 + (rx\\u22c5ry\\u22c54\\u22c5(Pa - GP)\\u22c51e27 + (GP\\u22c5rx + ry\\u22c51e27)^2)^0.5) / 2*(Pa - GP)\\n        // dividing the equation with 2*(Pa - GP). Pa is always > GP so answer will be positive.\\n        // xa = (((GP\\u22c5rx + ry\\u22c51e27) / 2*(Pa - GP)) + (((rx\\u22c5ry\\u22c54\\u22c5(Pa - GP)\\u22c51e27) / 4*(Pa - GP)^2) + ((GP\\u22c5rx + ry\\u22c51e27) / 2*(Pa - GP))^2)^0.5)\\n        // xa = (((GP\\u22c5rx + ry\\u22c51e27) / 2*(Pa - GP)) + (((rx\\u22c5ry\\u22c51e27) / (Pa - GP)) + ((GP\\u22c5rx + ry\\u22c51e27) / 2*(Pa - GP))^2)^0.5)\\n\\n        // dividing in 3 parts for simplification:\\n        // part1 = (Pa - GP)\\n        // part2 = (GP\\u22c5rx + ry\\u22c51e27) / (2*part1)\\n        // part3 = rx\\u22c5ry\\n        // note: part1 will almost always be < 1e28 but in case it goes above 1e27 then it's extremely unlikely it'll go above > 1e29\\n        unchecked {\\n            uint256 p1_ = pa_ - gp_;\\n            uint256 p2_ = ((gp_ * rx_) + (ry_ * PRICE_PRECISION)) / (2 * p1_);\\n\\n            // removed <1e50 check becuase rx_ * ry_ will never be greater than 1e50\\n            // Directly used p3_ below instead of using a variable for it\\n            // uint256 p3_ = (rx_ * ry_ * PRICE_PRECISION) / p1_;\\n\\n            // xa = part2 + (part3 + (part2 * part2))^(1/2)\\n            // yb = xa_ * gp_\\n            xa_ = p2_ + FixedPointMathLib.sqrt((((rx_ * ry_ * PRICE_PRECISION) / p1_) + (p2_ * p2_)));\\n            yb_ = (xa_ * gp_) / PRICE_PRECISION;\\n        }\\n    }\\n    \\n    /// @dev Given an input amount of asset and pair reserves, returns the maximum output amount of the other asset\\n    /// @param amountIn_ The amount of input asset.\\n    /// @param iReserveIn_ Imaginary token reserve with input amount.\\n    /// @param iReserveOut_ Imaginary token reserve of output amount.\\n    function _getAmountOut(uint256 amountIn_, uint256 iReserveIn_, uint256 iReserveOut_) internal pure returns (uint256 amountOut_) {\\n        unchecked {\\n            // Using the swap formula: (AmountIn * iReserveY) / (iReserveX + AmountIn)\\n            amountOut_ = (amountIn_ * iReserveOut_) / (iReserveIn_ + amountIn_);\\n        }\\n    }\\n\\n    /// @dev Given an output amount of asset and pair reserves, returns the input amount of the other asset\\n    /// @param amountOut_ Desired output amount of the asset.\\n    /// @param iReserveIn_ Imaginary token reserve of input amount.\\n    /// @param iReserveOut_ Imaginary token reserve of output amount.\\n    function _getAmountIn(uint256 amountOut_, uint256 iReserveIn_, uint256 iReserveOut_) internal pure returns (uint256 amountIn_) {\\n        unchecked {\\n            // Using the swap formula: (AmountOut * iReserveX) / (iReserveY - AmountOut)\\n            amountIn_ = (amountOut_ * iReserveIn_) / (iReserveOut_ - amountOut_);\\n        }\\n    }\\n\\n    function _verifySwap(uint256 amountAdjusted_, uint256 amount_, uint256 imaginaryReserves_) internal pure {\\n        // after adjusting amount should not become 0\\n        // limiting to six decimals which means in case of USDC, USDT it's 1 wei, for WBTC 100 wei, for ETH 1000 gwei\\n        if (amountAdjusted_ < FOUR_DECIMALS || amountAdjusted_ > X60 || amount_ < FOUR_DECIMALS || amount_ > X128) revert InvalidSwapAmounts();\\n\\n        // limiting amountAdjusted_ to be not more than 50% of imaginary reserves\\n        // basically, if this throws that means user is trying to swap 0.5x tokenIn if current tokenIn imaginary reserves is x\\n        // let's take x as token0 here, that means, initially the pool pricing might be:\\n        // token1Reserve / x and new pool pricing will become token1Reserve / 1.5x (token1Reserve will decrease after swap but for simplicity ignoring that)\\n        // So pool price is decreased by ~33.33% (oracle will throw error in this case as it only allows 5% price difference but better to limit it before hand)\\n        unchecked {\\n            if (amountAdjusted_ > (imaginaryReserves_ / 2)) revert ExcessiveSwapAmount();\\n        }\\n    }\\n\\n    /// @dev if token0 reserves are too low w.r.t token1 then revert, this is to avoid edge case scenario and making sure that precision on calculations should be high enough\\n    function _verifyToken0Reserves(uint256 token0Reserves_, uint256 token1Reserves_, uint256 centerPrice_) internal pure {\\n        unchecked {\\n            if (((token0Reserves_) < ((token1Reserves_ * PRICE_PRECISION) / (centerPrice_ * MINIMUM_LIQUIDITY_SWAP)))) {\\n                revert TokenReservesTooLow();\\n            }\\n        }\\n    }\\n\\n    /// @dev if token1 reserves are too low w.r.t token0 then revert, this is to avoid edge case scenario and making sure that precision on calculations should be high enough\\n    function _verifyToken1Reserves(uint256 token0Reserves_, uint256 token1Reserves_, uint256 centerPrice_) internal pure {\\n        unchecked {\\n            if (((token1Reserves_) < ((token0Reserves_ * centerPrice_) / (PRICE_PRECISION * MINIMUM_LIQUIDITY_SWAP)))) {\\n                revert TokenReservesTooLow();\\n            }\\n        }\\n    }\\n\\n    /// @dev This function calculates the new value of a parameter after a shifting process\\n    /// @param current_ The current value is the final value where the shift ends\\n    /// @param old_ The old value from where shifting started\\n    /// @param timePassed_ The time passed since shifting started\\n    /// @param shiftDuration_ The total duration of the shift when old_ reaches current_\\n    /// @return The new value of the parameter after the shift\\n    function _calcShiftingDone(uint256 current_, uint256 old_, uint256 timePassed_, uint256 shiftDuration_) internal pure returns (uint256) {\\n        unchecked {\\n            if (current_ > old_) return (old_ + (((current_ - old_) * timePassed_) / shiftDuration_));\\n            else return (old_ - (((old_ - current_) * timePassed_) / shiftDuration_));\\n        }\\n    }\\n\\n    /// @dev Calculates the new upper and lower range values during an active range shift\\n    /// @param upperRange_ The target upper range value\\n    /// @param lowerRange_ The target lower range value\\n    /// @param dexVariables_ needed in case shift is ended and we need to update dexVariables2\\n    /// @return The updated upper range, lower range, and dexVariables2\\n    /// @notice This function handles the gradual shifting of range values over time\\n    /// @notice If the shift is complete, it updates the state and clears the shift data\\n    function _calcRangeShifting(\\n        uint256 upperRange_,\\n        uint256 lowerRange_,\\n        uint256 dexVariables_,\\n        bytes32 dexId_\\n    ) internal returns (uint256, uint256, uint256) {\\n        uint256 rangeShift_ = _rangeShift[dexId_];\\n        uint256 shiftDuration_ = (rangeShift_ >> DSL.BITS_DEX_LITE_RANGE_SHIFT_TIME_TO_SHIFT) & X20;\\n        uint256 startTimeStamp_ = (rangeShift_ >> DSL.BITS_DEX_LITE_RANGE_SHIFT_TIMESTAMP) & X33;\\n\\n        uint256 timePassed_;\\n        unchecked {\\n            if ((startTimeStamp_ + shiftDuration_) < block.timestamp) {\\n                // shifting fully done\\n                delete _rangeShift[dexId_];\\n                // making active shift as 0 because shift is over\\n                // fetching from storage and storing in storage, aside from admin module dexVariables2 only updates from this function and _calcThresholdShifting.\\n                dexVariables_ = _dexVariables[dexId_] & ~uint256(1 << DSL.BITS_DEX_LITE_DEX_VARIABLES_RANGE_PERCENT_SHIFT_ACTIVE);\\n                _dexVariables[dexId_] = dexVariables_;\\n                return (upperRange_, lowerRange_, dexVariables_);\\n            }\\n            timePassed_ = block.timestamp - startTimeStamp_;\\n        }\\n        return (\\n            _calcShiftingDone(upperRange_, (rangeShift_ >> DSL.BITS_DEX_LITE_RANGE_SHIFT_OLD_UPPER_RANGE_PERCENT) & X14, timePassed_, shiftDuration_),\\n            _calcShiftingDone(lowerRange_, (rangeShift_ >> DSL.BITS_DEX_LITE_RANGE_SHIFT_OLD_LOWER_RANGE_PERCENT) & X14, timePassed_, shiftDuration_),\\n            dexVariables_\\n        );\\n    }\\n\\n    /// @dev Calculates the new upper and lower threshold values during an active threshold shift\\n    /// @param upperThreshold_ The target upper threshold value\\n    /// @param lowerThreshold_ The target lower threshold value\\n    /// @return The updated upper threshold, lower threshold\\n    /// @notice This function handles the gradual shifting of threshold values over time\\n    /// @notice If the shift is complete, it updates the state and clears the shift data\\n    function _calcThresholdShifting(\\n        uint256 upperThreshold_,\\n        uint256 lowerThreshold_,\\n        bytes32 dexId_\\n    ) internal returns (uint256, uint256) {\\n        uint256 thresholdShift_ = _thresholdShift[dexId_];\\n        uint256 shiftDuration_ = (thresholdShift_ >> DSL.BITS_DEX_LITE_THRESHOLD_SHIFT_TIME_TO_SHIFT) & X20;\\n        uint256 startTimeStamp_ = (thresholdShift_ >> DSL.BITS_DEX_LITE_THRESHOLD_SHIFT_TIMESTAMP) & X33;\\n\\n        uint256 timePassed_;\\n        unchecked {\\n            if ((startTimeStamp_ + shiftDuration_) < block.timestamp) {\\n                // shifting fully done\\n                delete _thresholdShift[dexId_];\\n                // making active shift as 0 because shift is over\\n                // fetching from storage and storing in storage, aside from admin module dexVariables2 only updates from this function and _calcRangeShifting.\\n                _dexVariables[dexId_] = _dexVariables[dexId_] & ~uint256(1 << DSL.BITS_DEX_LITE_DEX_VARIABLES_THRESHOLD_PERCENT_SHIFT_ACTIVE);\\n                return (upperThreshold_, lowerThreshold_);\\n            }\\n            timePassed_ = block.timestamp - startTimeStamp_;\\n        }\\n        return (\\n            _calcShiftingDone(upperThreshold_, (thresholdShift_ >> DSL.BITS_DEX_LITE_THRESHOLD_SHIFT_OLD_UPPER_THRESHOLD_PERCENT) & X7, timePassed_, shiftDuration_),\\n            _calcShiftingDone(lowerThreshold_, (thresholdShift_ >> DSL.BITS_DEX_LITE_THRESHOLD_SHIFT_OLD_LOWER_THRESHOLD_PERCENT) & X7, timePassed_, shiftDuration_)\\n        );\\n    }\\n\\n    /// @dev Calculates the new center price during an active price shift\\n    /// @param dexVariables_ The current state of dex variables\\n    /// @return newCenterPrice_ The updated center price\\n    /// @notice This function gradually shifts the center price towards a new target price over time\\n    /// @notice It uses an external price source (via ICenterPrice) to determine the target price\\n    /// @notice The shift continues until the current price reaches the target, or the shift duration ends\\n    /// @notice Once the shift is complete, it updates the state and clears the shift data\\n    /// @notice The shift rate is dynamic and depends on:\\n    /// @notice - Time remaining in the shift duration\\n    /// @notice - The new center price (fetched externally, which may change)\\n    /// @notice - The current (old) center price\\n    /// @notice This results in a fuzzy shifting mechanism where the rate can change as these parameters evolve\\n    /// @notice The externally fetched new center price is expected to not differ significantly from the last externally fetched center price\\n    function _calcCenterPrice(\\n        DexKey calldata dexKey_,\\n        uint256 dexVariables_,\\n        bytes32 dexId_\\n    ) internal returns (uint256 newCenterPrice_) {\\n        uint256 oldCenterPrice_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_CENTER_PRICE) & X40;\\n        oldCenterPrice_ = (oldCenterPrice_ >> DEFAULT_EXPONENT_SIZE) << (oldCenterPrice_ & DEFAULT_EXPONENT_MASK);\\n        uint256 centerPriceShift_ = _centerPriceShift[dexId_];\\n        uint256 startTimeStamp_ = (centerPriceShift_ >> DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_TIMESTAMP) & X33;\\n\\n        uint256 fromTimeStamp_ = (centerPriceShift_ >> DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_LAST_INTERACTION_TIMESTAMP) & X33;\\n        fromTimeStamp_ = fromTimeStamp_ > startTimeStamp_ ? fromTimeStamp_ : startTimeStamp_;\\n\\n        newCenterPrice_ = ICenterPrice(\\n            AddressCalcs.addressCalc(DEPLOYER_CONTRACT, ((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_CENTER_PRICE_CONTRACT_ADDRESS) & X19)))\\n            .centerPrice(dexKey_.token0, dexKey_.token1);\\n        \\n        unchecked {\\n            uint256 priceShift_ = (oldCenterPrice_ * ((centerPriceShift_ >> DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_PERCENT) & X20) * (block.timestamp - fromTimeStamp_)) \\n                                    / (((centerPriceShift_ >> DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_TIME_TO_SHIFT) & X20) * SIX_DECIMALS);\\n\\n            if (newCenterPrice_ > oldCenterPrice_) {\\n                // shift on positive side\\n                oldCenterPrice_ += priceShift_;\\n                if (newCenterPrice_ > oldCenterPrice_) {\\n                    newCenterPrice_ = oldCenterPrice_;\\n                } else {\\n                    // shifting fully done\\n                    _centerPriceShift[dexId_] = _centerPriceShift[dexId_] & ~(X73 << DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_PERCENT);\\n                    // making active shift as 0 because shift is over\\n                    // fetching from storage and storing in storage, aside from admin module dexVariables2 only updates these shift function.\\n                    _dexVariables[dexId_] = _dexVariables[dexId_] & ~uint256(1 << DSL.BITS_DEX_LITE_DEX_VARIABLES_CENTER_PRICE_SHIFT_ACTIVE);\\n                }\\n            } else {\\n                oldCenterPrice_ = oldCenterPrice_ > priceShift_ ? oldCenterPrice_ - priceShift_ : 0;\\n                // In case of oldCenterPrice_ ending up 0, which could happen when a lot of time has passed (pool has no swaps for many days or weeks)\\n                // then below we get into the else logic which will fully conclude shifting and return newCenterPrice_\\n                // as it was fetched from the external center price source.\\n                // not ideal that this would ever happen unless the pool is not in use and all/most users have left leaving not enough liquidity to trade on\\n                if (newCenterPrice_ < oldCenterPrice_) {\\n                    newCenterPrice_ = oldCenterPrice_;\\n                } else {\\n                    // shifting fully done\\n                    _centerPriceShift[dexId_] = _centerPriceShift[dexId_] & ~(X73 << DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_PERCENT);\\n                    // making active shift as 0 because shift is over\\n                    // fetching from storage and storing in storage, aside from admin module dexVariables2 only updates these shift function.\\n                    _dexVariables[dexId_] = _dexVariables[dexId_] & ~uint256(1 << DSL.BITS_DEX_LITE_DEX_VARIABLES_CENTER_PRICE_SHIFT_ACTIVE);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates and returns the current prices and exchange prices for the pool\\n    /// @param dexVariables_ The first set of DEX variables containing various pool parameters\\n    function _getPricesAndReserves(\\n        DexKey calldata dexKey_,\\n        uint256 dexVariables_,\\n        bytes32 dexId_,\\n        uint256 token0Supply_,\\n        uint256 token1Supply_\\n    ) internal returns (uint256 centerPrice_, uint256 token0ImaginaryReserves_, uint256 token1ImaginaryReserves_) {\\n        // Fetch center price\\n        if (((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_CENTER_PRICE_SHIFT_ACTIVE) & X1) == 0) {\\n            // centerPrice_ => center price nonce\\n            centerPrice_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_CENTER_PRICE_CONTRACT_ADDRESS) & X19;\\n            if (centerPrice_ == 0) {\\n                centerPrice_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_CENTER_PRICE) & X40;\\n                centerPrice_ = (centerPrice_ >> DEFAULT_EXPONENT_SIZE) << (centerPrice_ & DEFAULT_EXPONENT_MASK);\\n            } else {\\n                // center price should be fetched from external source. For exmaple, in case of wstETH <> ETH pool,\\n                // we would want the center price to be pegged to wstETH exchange rate into ETH\\n                centerPrice_ = \\n                    ICenterPrice(AddressCalcs.addressCalc(DEPLOYER_CONTRACT, centerPrice_)).centerPrice(dexKey_.token0, dexKey_.token1);\\n            }\\n        } else {\\n            // an active centerPrice_ shift is going on\\n            centerPrice_ = _calcCenterPrice(dexKey_, dexVariables_, dexId_);\\n        }\\n\\n        uint256 upperRangePercent_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_UPPER_PERCENT) & X14;\\n        uint256 lowerRangePercent_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_LOWER_PERCENT) & X14;\\n        if (((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_RANGE_PERCENT_SHIFT_ACTIVE) & X1) == 1) {\\n            // an active range shift is going on\\n            (upperRangePercent_, lowerRangePercent_, dexVariables_) = _calcRangeShifting(upperRangePercent_, lowerRangePercent_, dexVariables_, dexId_);\\n        }\\n\\n        uint256 upperRangePrice_;\\n        uint256 lowerRangePrice_;\\n        unchecked {\\n            // 1% = 1e4, 100% = 1e6\\n            upperRangePrice_ = (centerPrice_ * FIVE_DECIMALS) / (FIVE_DECIMALS - upperRangePercent_);\\n            // 1% = 1e4, 100% = 1e6\\n            lowerRangePrice_ = (centerPrice_ * (FIVE_DECIMALS - lowerRangePercent_)) / FIVE_DECIMALS;\\n        }\\n\\n        // Rebalance center price if rebalancing is on\\n        // temp_ => rebalancingStatus_\\n        uint256 temp_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_REBALANCING_STATUS) & X2;\\n        uint256 temp2_;\\n        if (temp_ > 1) {\\n            unchecked {\\n                // temp2_ => centerPriceShift_\\n                if (temp_ == 2) {\\n                    temp2_ = _centerPriceShift[dexId_];\\n                    uint256 shiftingTime_ = (temp2_ >> DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_SHIFTING_TIME) & X24;\\n                    uint256 timeElapsed_ = block.timestamp - ((temp2_ >> DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_LAST_INTERACTION_TIMESTAMP) & X33);\\n                    // price shifting towards upper range\\n                    if (timeElapsed_ < shiftingTime_) {\\n                        centerPrice_ = centerPrice_ + (((upperRangePrice_ - centerPrice_) * timeElapsed_) / shiftingTime_);\\n                    } else {\\n                        // 100% price shifted\\n                        centerPrice_ = upperRangePrice_;\\n                    }\\n                } else if (temp_ == 3) {\\n                    temp2_ = _centerPriceShift[dexId_];\\n                    uint256 shiftingTime_ = (temp2_ >> DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_SHIFTING_TIME) & X24;\\n                    uint256 timeElapsed_ = block.timestamp - ((temp2_ >> DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_LAST_INTERACTION_TIMESTAMP) & X33);\\n                    // price shifting towards lower range\\n                    if (timeElapsed_ < shiftingTime_) {\\n                        centerPrice_ = centerPrice_ - (((centerPrice_ - lowerRangePrice_) * timeElapsed_) / shiftingTime_);\\n                    } else {\\n                        // 100% price shifted\\n                        centerPrice_ = lowerRangePrice_;\\n                    }\\n                }\\n\\n                // If rebalancing actually happened then make sure price is within min and max bounds, and update range prices\\n                if (temp2_ > 0) {\\n                    // Make sure center price is within min and max bounds\\n                    // temp_ => max center price\\n                    temp_ = (temp2_ >> DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_MAX_CENTER_PRICE) & X28;\\n                    temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n                    if (centerPrice_ > temp_) {\\n                        // if center price is greater than max center price\\n                        centerPrice_ = temp_;\\n                    } else {\\n                        // check if center price is less than min center price\\n                        // temp_ => min center price\\n                        temp_ = (temp2_ >> DSL.BITS_DEX_LITE_CENTER_PRICE_SHIFT_MIN_CENTER_PRICE) & X28;\\n                        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n                        if (centerPrice_ < temp_) centerPrice_ = temp_;\\n                    }\\n\\n                    // Update range prices as center price moved\\n                    upperRangePrice_ = (centerPrice_ * FIVE_DECIMALS) / (FIVE_DECIMALS - upperRangePercent_);\\n                    lowerRangePrice_ = (centerPrice_ * (FIVE_DECIMALS - lowerRangePercent_)) / FIVE_DECIMALS;\\n                }\\n            }  \\n        }\\n\\n        // temp_ => geometricMeanPrice_\\n        unchecked {         \\n            if (upperRangePrice_ < 1e38) {\\n                // 1e38 * 1e38 = 1e76 which is less than max uint limit\\n                temp_ = FixedPointMathLib.sqrt(upperRangePrice_ * lowerRangePrice_);\\n            } else {\\n                // upperRange_ price is pretty large hence lowerRange_ will also be pretty large\\n                temp_ = FixedPointMathLib.sqrt((upperRangePrice_ / 1e18) * (lowerRangePrice_ / 1e18)) * 1e18;\\n            }\\n        }\\n\\n        if (temp_ < 1e27) {\\n            (token0ImaginaryReserves_, token1ImaginaryReserves_) = \\n                _calculateReservesOutsideRange(temp_, upperRangePrice_, token0Supply_, token1Supply_);\\n        } else {\\n            // inversing, something like `xy = k` so for calculation we are making everything related to x into y & y into x\\n            // 1 / geometricMean for new geometricMean\\n            // 1 / lowerRange will become upper range\\n            // 1 / upperRange will become lower range\\n            unchecked {\\n                (token1ImaginaryReserves_, token0ImaginaryReserves_) = _calculateReservesOutsideRange(\\n                    (1e54 / temp_),\\n                    (1e54 / lowerRangePrice_),\\n                    token1Supply_,\\n                    token0Supply_\\n                );\\n            }\\n        }\\n\\n        unchecked {\\n            token0ImaginaryReserves_ += token0Supply_;\\n            token1ImaginaryReserves_ += token1Supply_;\\n        }\\n    }\\n\\n    function _setRebalancingStatus(\\n        uint256 dexVariables_, \\n        bytes32 dexId_, \\n        uint256 rebalancingStatus_, \\n        uint256 price_, \\n        uint256 centerPrice_\\n    ) internal returns (uint256) {\\n        uint256 upperRange_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_UPPER_PERCENT) & X14;\\n        uint256 lowerRange_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_LOWER_PERCENT) & X14;\\n        if (((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_RANGE_PERCENT_SHIFT_ACTIVE) & X1) == 1) {\\n            // an active range shift is going on\\n            (upperRange_, lowerRange_, dexVariables_) = _calcRangeShifting(upperRange_, lowerRange_, dexVariables_, dexId_);\\n        }\\n\\n        unchecked {\\n            // adding into unchecked because upperRangePercent_ & lowerRangePercent_ can only be > 0 & < FIVE_DECIMALS\\n            // 1% = 1e4, 100% = 1e6\\n            upperRange_ = (centerPrice_ * FIVE_DECIMALS) / (FIVE_DECIMALS - upperRange_);\\n            // 1% = 1e4, 100% = 1e6\\n            lowerRange_ = (centerPrice_ * (FIVE_DECIMALS - lowerRange_)) / FIVE_DECIMALS;\\n        }\\n\\n        // Calculate threshold prices\\n        uint256 upperThreshold_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_UPPER_SHIFT_THRESHOLD_PERCENT) & X7;\\n        uint256 lowerThreshold_ = (dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_LOWER_SHIFT_THRESHOLD_PERCENT) & X7;\\n        if (((dexVariables_ >> DSL.BITS_DEX_LITE_DEX_VARIABLES_THRESHOLD_PERCENT_SHIFT_ACTIVE) & X1) == 1) {\\n            // if active shift is going on for threshold then calculate threshold real time\\n            (upperThreshold_, lowerThreshold_) = _calcThresholdShifting(upperThreshold_, lowerThreshold_, dexId_);\\n        }\\n\\n        unchecked {\\n            upperThreshold_ = \\n                (centerPrice_ + ((upperRange_ - centerPrice_) * (TWO_DECIMALS - upperThreshold_)) / TWO_DECIMALS);\\n            lowerThreshold_ = \\n                (centerPrice_ - ((centerPrice_ - lowerRange_) * (TWO_DECIMALS - lowerThreshold_)) / TWO_DECIMALS);\\n        }\\n\\n        if (price_ > upperThreshold_) {\\n            if (rebalancingStatus_ != 2) {\\n                _dexVariables[dexId_] = _dexVariables[dexId_] & ~(X2 << DSL.BITS_DEX_LITE_DEX_VARIABLES_REBALANCING_STATUS) | \\n                    (2 << DSL.BITS_DEX_LITE_DEX_VARIABLES_REBALANCING_STATUS);\\n                return 2;\\n            }\\n        } else if (price_ < lowerThreshold_) {\\n            if (rebalancingStatus_ != 3) {\\n                _dexVariables[dexId_] = _dexVariables[dexId_] & ~(X2 << DSL.BITS_DEX_LITE_DEX_VARIABLES_REBALANCING_STATUS) | \\n                    (3 << DSL.BITS_DEX_LITE_DEX_VARIABLES_REBALANCING_STATUS);\\n                return 3;\\n            }\\n        } else {\\n            if (rebalancingStatus_ != 1) {\\n                _dexVariables[dexId_] = _dexVariables[dexId_] & ~(X2 << DSL.BITS_DEX_LITE_DEX_VARIABLES_REBALANCING_STATUS) | \\n                    (1 << DSL.BITS_DEX_LITE_DEX_VARIABLES_REBALANCING_STATUS);\\n                return 1;\\n            }\\n        }\\n\\n        return rebalancingStatus_;\\n    }\\n\\n    // TODO: should we add functionality for net transfers for arbitraguers?\\n    function _transferTokens(\\n        address tokenIn_,\\n        uint256 amountIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        address to_,\\n        bool isCallback_,\\n        bytes calldata callbackData_\\n    ) internal {\\n        if (to_ == address(0)) to_ = msg.sender;\\n\\n        // Transfer tokens out first\\n        if (tokenOut_ == NATIVE_TOKEN) SafeTransfer.safeTransferNative(to_, amountOut_);\\n        else SafeTransfer.safeTransfer(tokenOut_, to_, amountOut_);\\n\\n        // Transfer tokens in\\n        if (tokenIn_ == NATIVE_TOKEN) {\\n            if (isCallback_ && msg.value == 0) {\\n                uint256 ethBalance_ = address(this).balance;\\n                IDexLiteCallback(msg.sender).dexCallback(tokenIn_, amountIn_, callbackData_);\\n                if (address(this).balance - ethBalance_ < amountIn_) revert InsufficientNativeToken();\\n            }  else {\\n                if (msg.value < amountIn_) revert InsufficientNativeToken();\\n                if (msg.value > amountIn_) SafeTransfer.safeTransferNative(msg.sender, msg.value - amountIn_);\\n                // if msg.value == amountIn_ then that means the transfer has already happened\\n            }\\n        } else {\\n            if (msg.value > 0) revert InvalidMsgValue(); // msg.value should be 0 for non native tokens\\n            if (isCallback_) {\\n                uint256 tokenInBalance_ = IERC20(tokenIn_).balanceOf(address(this));\\n                IDexLiteCallback(msg.sender).dexCallback(tokenIn_, amountIn_, callbackData_);\\n                if ((IERC20(tokenIn_).balanceOf(address(this)) - tokenInBalance_) < amountIn_) revert InsufficientERC20();\\n            } else SafeTransfer.safeTransferFrom(tokenIn_, msg.sender, address(this), amountIn_);\\n        }\\n    }\\n\\n    /// @dev            do any arbitrary call\\n    /// @param target_  Address to which the call needs to be delegated\\n    /// @param data_    Data to execute at the delegated address\\n    function _spell(address target_, bytes memory data_) internal returns (bytes memory response_) {\\n        assembly {\\n            let succeeded := delegatecall(gas(), target_, add(data_, 0x20), mload(data_), 0, 0)\\n            let size := returndatasize()\\n\\n            response_ := mload(0x40)\\n            mstore(0x40, add(response_, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n            mstore(response_, size)\\n            returndatacopy(add(response_, 0x20), 0, size)\\n\\n            if iszero(succeeded) {\\n                // throw if delegatecall failed\\n                returndatacopy(0x00, 0x00, size)\\n                revert(0x00, size)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xade14756314cb2f6541b57c6839871423cd157001fffe0575e87b38ffabad12c\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/dexLite/core/main.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.29;\\n\\nimport \\\"./coreInternals.sol\\\";\\n\\n/// @title FluidDexLite\\ncontract FluidDexLite is CoreInternals {\\n    constructor(address auth_, address liquidity_, address deployerContract_) {\\n        _isAuth[auth_] = 1;\\n        LIQUIDITY = IFluidLiquidity(liquidity_);\\n        DEPLOYER_CONTRACT = deployerContract_;\\n    }\\n\\n    /// @notice Swap through a single dex pool\\n    /// @dev Uses _swapIn for positive amountSpecified_ (user provides input), _swapOut for negative (user receives output).\\n    /// @param dexKey_ The dex pool to swap through.\\n    /// @param swap0To1_ Whether to swap from token0 to token1 or vice versa.\\n    /// @param amountSpecified_ The amount to swap (positive for exact input, negative for exact output).\\n    /// @param amountLimit_ The minimum/maximum amount for the unspecified side.\\n    /// @param to_ The recipient address.\\n    function swapSingle(\\n        DexKey calldata dexKey_, \\n        bool swap0To1_, \\n        int256 amountSpecified_,\\n        uint256 amountLimit_,\\n        address to_,\\n        bool isCallback_,\\n        bytes calldata callbackData_,\\n        bytes calldata extraData_\\n    ) external payable _reentrancyLock returns (uint256 amountUnspecified_) {\\n        if (amountSpecified_ > 0) {\\n            amountUnspecified_ = _swapIn(dexKey_, swap0To1_, uint256(amountSpecified_));\\n\\n            if (amountUnspecified_ <= amountLimit_) revert();\\n\\n            if (extraData_.length > 0) _callExtraDataSlot(abi.encode(SWAP_SINGLE, abi.encode(dexKey_, swap0To1_, amountSpecified_, amountUnspecified_, extraData_)));\\n            else {\\n                if (swap0To1_) _transferTokens(dexKey_.token0, uint256(amountSpecified_), dexKey_.token1, amountUnspecified_, to_, isCallback_, callbackData_);\\n                else _transferTokens(dexKey_.token1, uint256(amountSpecified_), dexKey_.token0, amountUnspecified_, to_, isCallback_, callbackData_);\\n            }\\n        } else {\\n            amountUnspecified_ = _swapOut(dexKey_, swap0To1_, uint256(-amountSpecified_));\\n\\n            if (amountUnspecified_ >= amountLimit_) revert();\\n\\n            if (extraData_.length > 0) _callExtraDataSlot(abi.encode(SWAP_SINGLE, abi.encode(dexKey_, swap0To1_, amountSpecified_, amountUnspecified_, extraData_)));\\n            else {\\n                if (swap0To1_) _transferTokens(dexKey_.token0, amountUnspecified_, dexKey_.token1, uint256(-amountSpecified_), to_, isCallback_, callbackData_);\\n                else _transferTokens(dexKey_.token1, amountUnspecified_, dexKey_.token0, uint256(-amountSpecified_), to_, isCallback_, callbackData_);\\n            }\\n        }\\n    }\\n\\n    /// @notice Swap through a path of dex pools\\n    /// @dev Uses _swapIn for positive amountSpecified_ (user provides input), _swapOut for negative (user receives output).\\n    /// @param path_ The path of the swap.\\n    /// @param dexKeys_ The dex pools to swap through.\\n    /// @param amountSpecified_ The amount to swap (positive for exact input, negative for exact output).\\n    /// @param amountLimit_ The minimum/maximum amount for the unspecified side.\\n    /// @param to_ The recipient address.\\n    /// @param isCallback_ Whether to invoke a callback for transfering the input token.\\n    /// @param callbackData_ Data to pass to the callback.\\n    /// @return amountUnspecified_ The amount of the unspecified token.\\n    function swapMultihop(\\n        address[] calldata path_,\\n        DexKey[] calldata dexKeys_,\\n        int256 amountSpecified_,\\n        uint256 amountLimit_,\\n        address to_,\\n        bool isCallback_,\\n        bytes calldata callbackData_,\\n        bytes calldata extraData_\\n    ) external payable _reentrancyLock returns (uint256 amountUnspecified_) {\\n        if (dexKeys_.length == 0) revert(); // atleast 1 swap\\n        if (path_.length - 1 != dexKeys_.length) revert(); // path length should be 1 more than the number of swaps\\n\\n        if (amountSpecified_ > 0) {\\n            // Swap In (Exact input amount provided by the user)\\n            amountUnspecified_ = uint256(amountSpecified_);\\n\\n            for (uint256 i = 0; i < dexKeys_.length; ) {\\n                bool swap0To1_;\\n                unchecked {\\n                    if (path_[i] == dexKeys_[i].token0 && path_[i + 1] == dexKeys_[i].token1) swap0To1_ = true;\\n                    else if (path_[i] == dexKeys_[i].token1 && path_[i + 1] == dexKeys_[i].token0) swap0To1_ = false;\\n                    else revert();\\n                }\\n\\n                amountUnspecified_ = _swapIn(dexKeys_[i], swap0To1_, amountUnspecified_);\\n\\n                unchecked { ++i; }\\n            }\\n\\n            if (amountUnspecified_ <= amountLimit_) revert();\\n\\n            if (extraData_.length > 0) _callExtraDataSlot(abi.encode(SWAP_MULTIHOP, abi.encode(path_, dexKeys_, amountSpecified_, amountUnspecified_, extraData_)));\\n            else _transferTokens(path_[0], uint256(amountSpecified_), path_[dexKeys_.length], amountUnspecified_, to_, isCallback_, callbackData_);\\n        } else {\\n            // Swap Out (Exact output amount received by the user)\\n            amountUnspecified_ = uint256(-amountSpecified_);\\n\\n            for (uint256 i = dexKeys_.length; i > 0; ) {\\n                bool swap0To1_;\\n                unchecked {\\n                    if (path_[i - 1] == dexKeys_[i - 1].token0 && path_[i] == dexKeys_[i - 1].token1) swap0To1_ = true;\\n                    else if (path_[i - 1] == dexKeys_[i - 1].token1 && path_[i] == dexKeys_[i - 1].token0) swap0To1_ = false;\\n                    else revert();\\n                }\\n\\n                amountUnspecified_ = _swapOut(dexKeys_[i - 1], swap0To1_, amountUnspecified_);\\n\\n                unchecked { --i; }\\n            }\\n\\n            if (amountUnspecified_ >= amountLimit_) revert();\\n\\n            if (extraData_.length > 0) _callExtraDataSlot(abi.encode(SWAP_MULTIHOP, abi.encode(path_, dexKeys_, amountSpecified_, amountUnspecified_, extraData_)));\\n            else _transferTokens(path_[0], amountUnspecified_, path_[dexKeys_.length], uint256(-amountSpecified_), to_, isCallback_, callbackData_);\\n        }\\n    }\\n\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_) {\\n        assembly {\\n            result_ := sload(slot_)\\n        }\\n    }\\n\\n    fallback(bytes calldata data_) external payable _reentrancyLock returns (bytes memory) {\\n        if (_isAuth[msg.sender] != 1 && _getGovernanceAddr() != msg.sender) revert(); // FluidLiquidityError(ErrorTypes.AdminModule__OnlyAuths);\\n\\n        (address target_, bytes memory spellData_) = abi.decode(data_, (address, bytes));\\n        return _spell(target_, spellData_);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x28ec1b23d66de217aaddc1f1e58f73ef9a64d125718de70bf9ceec8b2d9bf8c6\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/dexLite/other/commonImport.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.29;\\n\\nimport \\\"./variables.sol\\\";\\n\\nabstract contract CommonImport is Variables {}\\n\",\"keccak256\":\"0x967827dfa7749bdd140e2012d69ce4fc6c57386f92a7bafa739a01955628b738\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/dexLite/other/constantVariables.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.29;\\n\\nimport \\\"./events.sol\\\";\\n\\nabstract contract ConstantVariables {\\n    /*//////////////////////////////////////////////////////////////\\n                                CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// bytes32(uint256(keccak256(\\\"FLUID_DEX_LITE_EXTRA_DATA\\\")) - 1)\\n    bytes32 internal constant EXTRA_DATA_SLOT = 0x7e8134afb5ed35d36cb65e24b9a4712a52bb77d952806c1acf50970d2107797f;\\n\\n    /// This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1\\n    /// The exact slot which stored the admin address in infinite proxy of liquidity contracts\\n    bytes32 internal constant LIQUIDITY_GOVERNANCE_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    bool internal constant SWAP_SINGLE = true;\\n    bool internal constant SWAP_MULTIHOP = false;\\n\\n    address internal constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant NATIVE_TOKEN_DECIMALS = 18;\\n    uint256 internal constant TOKENS_DECIMALS_PRECISION = 9;\\n\\n    uint8 internal constant MIN_TOKEN_DECIMALS = 6;\\n    uint8 internal constant MAX_TOKEN_DECIMALS = 18;\\n\\n    uint256 internal constant SMALL_COEFFICIENT_SIZE = 20;\\n    uint256 internal constant BIG_COEFFICIENT_SIZE = 32;\\n\\n    uint256 internal constant DEFAULT_EXPONENT_SIZE = 8;\\n    uint256 internal constant DEFAULT_EXPONENT_MASK = 0xFF;\\n\\n    uint256 internal constant X1 = 0x1;\\n    uint256 internal constant X2 = 0x3;\\n    uint256 internal constant X5 = 0x1f;\\n    uint256 internal constant X7 = 0x7f;\\n    uint256 internal constant X13 = 0x1fff;\\n    uint256 internal constant X14 = 0x3fff;\\n    uint256 internal constant X19 = 0x7ffff;\\n    uint256 internal constant X20 = 0xfffff;\\n    uint256 internal constant X24 = 0xffffff;\\n    uint256 internal constant X28 = 0xfffffff;\\n    uint256 internal constant X33 = 0x1ffffffff;\\n    uint256 internal constant X40 = 0xffffffffff;\\n    uint256 internal constant X56 = 0xffffffffffffff;\\n    uint256 internal constant X60 = 0xfffffffffffffff;\\n    uint256 internal constant X73 = 0x1ffffffffffffffffff;\\n    uint256 internal constant X120 = 0xffffffffffffffffffffffffffffff;\\n    uint256 internal constant X128 = 0xffffffffffffffffffffffffffffffff;\\n\\n   \\n    uint256 internal constant ONE_DECIMALS = 1e1;\\n    uint256 internal constant TWO_DECIMALS = 1e2;\\n    uint256 internal constant THREE_DECIMALS = 1e3;\\n    uint256 internal constant FOUR_DECIMALS = 1e4;\\n    uint256 internal constant FIVE_DECIMALS = 1e5;\\n    uint256 internal constant SIX_DECIMALS = 1e6;\\n    uint256 internal constant EIGHT_DECIMALS = 1e8;\\n\\n    uint256 internal constant PRICE_PRECISION = 1e27;\\n\\n    /// after swap token0 reserves should not be less than token1InToken0 / MINIMUM_LIQUIDITY_SWAP\\n    /// after swap token1 reserves should not be less than token0InToken1 / MINIMUM_LIQUIDITY_SWAP\\n    uint256 internal constant MINIMUM_LIQUIDITY_SWAP = 1e4;\\n}\\n\",\"keccak256\":\"0x6984b65da260d305ec8102ef2b1ed80aeb1908489d93a042fddfcde5b48f89de\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/dexLite/other/events.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.29;\\n\\nimport \\\"./interfaces.sol\\\";\\n\\nevent LogSwap(bytes32 dexId, uint256 swapData);\\n// swapData\\n// First 1  bit  => 0        => swap 0 to 1 (1 => true, 0 => false)\\n// Next  60 bits => 1  - 60  => amountIn\\n// Next  60 bits => 61 - 120 => amountOut\",\"keccak256\":\"0xa4a4f0f80452b046a442b4f114e15daf401ffb095a5d67da241f8979461fea2d\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/dexLite/other/immutableVariables.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.29;\\nimport \\\"./constantVariables.sol\\\";\\n\\n// TODO\\n// import { IFluidDexFactory } from \\\"../../interfaces/iDexFactory.sol\\\";\\n// import { Error } from \\\"../../error.sol\\\";\\n// import { ErrorTypes } from \\\"../../errorTypes.sol\\\";\\n\\nabstract contract ImmutableVariables is ConstantVariables {\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Address of liquidity contract\\n    IFluidLiquidity internal immutable LIQUIDITY;\\n\\n    /// @dev Address of contract used for deploying center price & hook related contract\\n    address internal immutable DEPLOYER_CONTRACT;\\n}\\n\",\"keccak256\":\"0x82047fd9188e20fd0fbfbd72c67f706e775760ac872cbd83f9ba89bd6b87ffec\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/dexLite/other/interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.29;\\nimport { IERC20 } from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IFluidLiquidity } from \\\"../../../liquidity/interfaces/iLiquidity.sol\\\";\\nimport \\\"./structs.sol\\\";\\n\\ninterface IERC20WithDecimals is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IDexLiteCallback {\\n    function dexCallback(address token_, uint256 amount_, bytes calldata data_) external;\\n}\\n\\ninterface ICenterPrice {\\n    /// @notice Retrieves the center price for the pool\\n    /// @dev This function is marked as non-constant (potentially state-changing) to allow flexibility in price fetching mechanisms.\\n    ///      While typically used as a read-only operation, this design permits write operations if needed for certain token pairs\\n    ///      (e.g., fetching up-to-date exchange rates that may require state changes).\\n    /// @return price The current price of token0 in terms of token1, expressed with 27 decimal places\\n    function centerPrice(address token0_, address token1_) external returns (uint256);\\n}\",\"keccak256\":\"0x75ce676834a3872107e04e6b2dfa0cd9666dbb91c980bb443625a7e9964f2dca\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/dexLite/other/structs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.29;\\n\\nimport \\\"./events.sol\\\";\\n\\nstruct DexKey {\\n    address token0;\\n    address token1;\\n    bytes32 salt;\\n}\\n\",\"keccak256\":\"0x1a49349f8dc70ee3dd1bc66763dc314d613497a167b9422f5e0f2190edb91fda\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/dexLite/other/variables.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.29;\\n\\nimport \\\"./immutableVariables.sol\\\";\\n\\nabstract contract Variables is ImmutableVariables {\\n    /// @dev admin address\\n    mapping(address => uint256) internal _isAuth;\\n\\n    // First 13 bits => 0   - 12  => fee (1% = 10000, max value: 8191 = .8191%)\\n    // Next  7  bits => 13  - 19  => revenue cut (1 = 1%)\\n    // Next  2  bit  => 20  - 21  => rebalancing status (0 = off, 1 = on but not active, 2 = rebalancing active towards upper range, 3 = rebalancing active towards lower range)\\n    // Next  1  bit  => 22        => is center price shift active\\n    // Next  40 bits => 23  - 62  => center price. Center price from where the ranges will be calculated. BigNumber (32 bits precision, 8 bits exponent)\\n    // Next  19 bits => 63  - 81  => center price contract address (Deployment Factory Nonce)\\n    // Next  1  bit  => 82        => range percent shift active or not, 0 = false, 1 = true, if true than that means governance has updated the below percents and the update should happen with a specified time\\n    // Next  14 bits => 83  - 96  => upperPercent (1% = 1000) upperRange - upperRange * upperPercent = centerPrice. Hence, upperRange = centerPrice / (1 - upperPercent)\\n    // Next  14 bits => 97  - 110 => lowerPercent (1% = 1000) lowerRange = centerPrice - centerPrice * lowerPercent\\n    // Next  1  bit  => 111       => threshold percent shift active or not, 0 = false, 1 = true, if true than that means governance has updated the below percents and the update should happen with a specified time\\n    // Next  7 bits  => 112 - 118 => upper shift threshold percent, 1 = 1%. 100 = 100%. if currentPrice > (centerPrice + (upperRange - centerPrice) * (100 - upperShiftThresholdPercent) / 100) then trigger shift\\n    // Next  7 bits  => 119 - 125 => lower shift threshold percent, 1 = 1%. 100 = 100%. if currentPrice < (centerPrice - (centerPrice - lowerRange) * (100 - lowerShiftThresholdPercent) / 100) then trigger shift\\n    // Next  5  bits => 126 - 130 => token 0 decimals\\n    // Next  5  bits => 131 - 135 => token 1 decimals\\n    // Next  60 bits => 136 - 195 => total token 0 adjusted amount\\n    // Next  60 bits => 196 - 255 => total token 1 adjusted amount\\n    /// @dev dex id => dex variables\\n    mapping(bytes32 => uint256) internal _dexVariables;\\n\\n    /// NOTE: Center price shift is always fuzzy, and can shift because of rebalancing or center price shift\\n    // First 33 bits => 0   - 32  => last interaction timestamp (only stored when either rebalancing or center price shift is active)\\n    /// REBALANCING RELATED THINGS\\n    // First 24 bits => 33  - 56  => shifting time (max ~194 days)\\n    // Next  28 bits => 57  - 84  => max center price. BigNumber (20 bits precision, 8 bits exponent)\\n    // Next  28 bits => 85  - 112 => min center price. BigNumber (20 bits precision, 8 bits exponent)\\n    /// CENTER PRICE SHIFT RELATED THINGS\\n    // First 20 bits => 113 - 132 => % shift (1% = 1000)\\n    // Next  20 bits => 133 - 152 => time to shift that percent, ~12 days max\\n    // Next  33 bits => 153 - 185 => timestamp of when the shift started\\n    // Last 70 bits empty\\n    /// @dev dex id => center price shift\\n    mapping(bytes32 => uint256) internal _centerPriceShift;\\n\\n    /// Range Shift (first 128 bits)\\n    // First 14 bits => 0  - 13 => old upper range percent\\n    // Next  14 bits => 14 - 27 => old lower range percent\\n    // Next  20 bits => 28 - 47 => time to shift in seconds, ~12 days max, shift can last for max ~12 days\\n    // Next  33 bits => 48 - 80 => timestamp of when the shift has started.\\n    // Last 175 bits empty\\n    /// @dev dex id => range shift\\n    mapping(bytes32 => uint256) internal _rangeShift;\\n\\n    // First 7  bits => 0  - 6  => old upper threshold percent\\n    // Next  7  bits => 7  - 13 => old lower threshold percent\\n    // Next  20 bits => 14 - 33 => time to shift in seconds, ~12 days max, shift can last for max ~12 days\\n    // Next  33 bits => 34 - 66 => timestamp of when the shift has started\\n    // Last 189 bits empty\\n    /// @dev dex id => threshold shift\\n    mapping(bytes32 => uint256) internal _thresholdShift;\\n}\\n\",\"keccak256\":\"0x0e71dbda5cb1a02b4c96e50b9a00c594bacdb9f6736f3cdb82fbedd4a84eafbf\",\"license\":\"BUSL-1.1\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b62af9baf5b8e991ed7531bc87f45550ba9d61e8dbff5caf237ccaf3a3fd843\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561000f575f5ffd5b5060405161348138038061348183398101604081905261002e91610074565b6001600160a01b039283165f908152602081905260409020600190559082166080521660a0526100b4565b80516001600160a01b038116811461006f575f5ffd5b919050565b5f5f5f60608486031215610086575f5ffd5b61008f84610059565b925061009d60208501610059565b91506100ab60408501610059565b90509250925092565b60805160a0516133a56100dc5f395f818161199601526126c501525f6101b901526133a55ff3fe608060405260043610610037575f3560e01c80637fc9d4ad146100c2578063b592f8a6146100e7578063b5c736e4146100fa5761003e565b3661003e57005b5f36606061004a610118565b335f9081526020819052604090205460011480159061008657503361006d610169565b73ffffffffffffffffffffffffffffffffffffffff1614155b1561008f575f5ffd5b5f8061009d84860186612c4b565b915091506100ab828261023c565b925050506100b761027e565b915050805190602001f35b6100d56100d0366004612db2565b6102a3565b60405190815260200160405180910390f35b6100d56100f5366004612f03565b610455565b348015610105575f5ffd5b506100d561011436600461300a565b5490565b7fb9cde754d19acfff2b3ccabc66f256d3563a0bc5805da4205f01a9bda38a2df75c15610143575f5ffd5b60017fb9cde754d19acfff2b3ccabc66f256d3563a0bc5805da4205f01a9bda38a2df75d565b6040517fb5c736e40000000000000000000000000000000000000000000000000000000081527fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360048201525f907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b5c736e490602401602060405180830381865afa158015610213573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102379190613021565b905090565b60605f5f835160208501865af43d6040519250601f19601f6020830101168301604052808352805f602085013e8161027657805f5f3e805ffd5b505092915050565b5f7fb9cde754d19acfff2b3ccabc66f256d3563a0bc5805da4205f01a9bda38a2df75d565b5f6102ac610118565b5f89131561039c576102bf8b8b8b610aa8565b90508781116102cc575f5ffd5b81156103475761034260018c8c8c8588886040516020016102f2969594939291906130d6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905261032e9291602001613116565b604051602081830303815290604052610fbe565b61043f565b891561037b5761034261035d60208d018d613172565b8a8d60200160208101906103719190613172565b848b8b8b8b611045565b61034261038e60408d0160208e01613172565b8a61037160208f018f613172565b6103af8b8b6103aa8c6131c1565b611444565b90508781106103bc575f5ffd5b81156103e25761034260018c8c8c8588886040516020016102f2969594939291906130d6565b891561041e576103426103f860208d018d613172565b828d602001602081019061040c9190613172565b6104158d6131c1565b8b8b8b8b611045565b61043f61043160408d0160208e01613172565b8261040c60208f018f613172565b61044761027e565b9a9950505050505050505050565b5f61045e610118565b5f8a900361046a575f5ffd5b8961047660018e6131f7565b1461047f575f5ffd5b5f8913156107745750875f5b8a8110156106e8575f8c8c838181106104a6576104a661320a565b6104bc9260206060909202019081019150613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f848181106104e4576104e461320a565b90506020020160208101906104f99190613172565b73ffffffffffffffffffffffffffffffffffffffff1614801561059957508c8c838181106105295761052961320a565b90506060020160200160208101906105419190613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f8460010181811061056c5761056c61320a565b90506020020160208101906105819190613172565b73ffffffffffffffffffffffffffffffffffffffff16145b156105a6575060016106bb565b8c8c838181106105b8576105b861320a565b90506060020160200160208101906105d09190613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f848181106105f8576105f861320a565b905060200201602081019061060d9190613172565b73ffffffffffffffffffffffffffffffffffffffff161480156106ab57508c8c8381811061063d5761063d61320a565b6106539260206060909202019081019150613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f8460010181811061067e5761067e61320a565b90506020020160208101906106939190613172565b73ffffffffffffffffffffffffffffffffffffffff16145b156106b757505f6106bb565b5f5ffd5b6106dd8d8d848181106106d0576106d061320a565b9050606002018285610aa8565b92505060010161048b565b508781116106f4575f5ffd5b81156107225761071d5f8e8e8e8e8e878a8a6040516020016102f2989796959493929190613237565b610a90565b61071d8d8d5f8181106107375761073761320a565b905060200201602081019061074c9190613172565b8a8f8f8e81811061075f5761075f61320a565b90506020020160208101906103719190613172565b61077d896131c1565b9050895b8015610a09575f8c8c6001840381811061079d5761079d61320a565b6107b39260206060909202019081019150613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f600185038181106107de576107de61320a565b90506020020160208101906107f39190613172565b73ffffffffffffffffffffffffffffffffffffffff1614801561089357508c8c600184038181106108265761082661320a565b905060600201602001602081019061083e9190613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f848181106108665761086661320a565b905060200201602081019061087b9190613172565b73ffffffffffffffffffffffffffffffffffffffff16145b156108a0575060016109b3565b8c8c600184038181106108b5576108b561320a565b90506060020160200160208101906108cd9190613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f600185038181106108f8576108f861320a565b905060200201602081019061090d9190613172565b73ffffffffffffffffffffffffffffffffffffffff161480156109ab57508c8c600184038181106109405761094061320a565b6109569260206060909202019081019150613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f8481811061097e5761097e61320a565b90506020020160208101906109939190613172565b73ffffffffffffffffffffffffffffffffffffffff16145b156106b757505f5b6109df8d8d6109c36001866131f7565b8181106109d2576109d261320a565b9050606002018285611444565b9250507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610781565b50878110610a15575f5ffd5b8115610a3e5761071d5f8e8e8e8e8e878a8a6040516020016102f2989796959493929190613237565b610a908d8d5f818110610a5357610a5361320a565b9050602002016020810190610a689190613172565b828f8f8e818110610a7b57610a7b61320a565b905060200201602081019061040c9190613172565b610a9861027e565b9c9b505050505050505050505050565b5f5f84604051602001610abb91906132f5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301205f81815260019093529082205490925090819003610b43576040517f72294811000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b608881901c670fffffffffffffff1660c482901c5f8080610b678b87898888611952565b9250925092508915610c44575f80607e88901c601f166009811115610ba35760098103600a0a8c81610b9b57610b9b613303565b049250610baf565b80600903600a0a8c0292505b50610bbb828c86611d24565b620f4240611fff8916830204610bd48184038686611dd5565b91506064600d8a901c607f168202048303979097019650610bf581876131f7565b9550610c02878787611df2565b608388901c601f166009811115610c235760098103600a0a82029a50610c3c565b80600903600a0a8281610c3857610c38613303565b049a505b505050610d11565b5f80608388901c601f166009811115610c745760098103600a0a8c81610c6c57610c6c613303565b049250610c80565b80600903600a0a8c0292505b50610c8c828c85611d24565b620f4240611fff8916830204610ca58184038587611dd5565b91506064600d8a901c607f168202048303969096019550610cc681886131f7565b9650610cd3878787611e3d565b607e88901c601f166009811115610cf45760098103600a0a82029a50610d0d565b80600903600a0a8281610d0957610d09613303565b049a505b5050505b601486901c6003168015610e67575f601f607e89901c81169060838a901c168d15610dc7575f5f6009841115610d5e5760098403600a0a8f81610d5657610d56613303565b049150610d6a565b83600903600a0a8f0291505b6009831115610d905760098303600a0a8e81610d8857610d88613303565b049050610d9c565b82600903600a0a8e0290505b8188016b033b2e3c9fd0803ce80000008289030281610dbd57610dbd613303565b0494505050610e54565b5f5f6009831115610def5760098303600a0a8f81610de757610de7613303565b049150610dfb565b82600903600a0a8f0291505b6009841115610e215760098403600a0a8e81610e1957610e19613303565b049050610e2d565b83600903600a0a8e0290505b8088036b033b2e3c9fd0803ce80000008389010281610e4e57610e4e613303565b04945050505b5050610e63888a848489611e98565b9150505b6001811180610e7d57506001601688901c166001145b15610eb8575f88815260026020526040902080547ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000016421790555b50670fffffffffffffff851180610ed65750670fffffffffffffff84115b15610f1e576040517f9e0db878000000000000000000000000000000000000000000000000000000008152600481018890526024810186905260448101859052606401610b3a565b5f8781526001602081905260408220805470ffffffffffffffffffffffffffffffffff16608889901b1760c488901b1790557fa2babd1c089bb9a4c9c6dc3859310edeabaeffa193c671b52a0c806d4bfa0d33918991603d8c901b91908d901b908e610f8b576001610f8d565b5f5b901b1717604051610fa8929190918252602082015260400190565b60405180910390a1505050505050509392505050565b5f610fe77f7e8134afb5ed35d36cb65e24b9a4712a52bb77d952806c1acf50970d2107797f5490565b905073ffffffffffffffffffffffffffffffffffffffff8116611036576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611040818361023c565b505050565b73ffffffffffffffffffffffffffffffffffffffff8416611064573393505b7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff8716016110b0576110ab848661204d565b6110bb565b6110bb868587612096565b7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff89160161121e57828015611103575034155b156111c4576040517fb6a545480000000000000000000000000000000000000000000000000000000081524790339063b6a545489061114c908c908c9088908890600401613330565b5f604051808303815f87803b158015611163575f5ffd5b505af1158015611175573d5f5f3e3d5ffd5b5050505087814761118691906131f7565b10156111be576040517f64403ed200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061143a565b863410156111fe576040517f64403ed200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86341115611219576112193361121489346131f7565b61204d565b61143a565b3415611256576040517f1841b4e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b821561142e576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff8a16906370a0823190602401602060405180830381865afa1580156112c6573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112ea9190613021565b6040517fb6a54548000000000000000000000000000000000000000000000000000000008152909150339063b6a545489061132f908c908c9088908890600401613330565b5f604051808303815f87803b158015611346575f5ffd5b505af1158015611358573d5f5f3e3d5ffd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201528a925083915073ffffffffffffffffffffffffffffffffffffffff8c16906370a0823190602401602060405180830381865afa1580156113c8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113ec9190613021565b6113f691906131f7565b10156111be576040517f5d052a9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61143a8833308a61213c565b5050505050505050565b5f5f8460405160200161145791906132f5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301205f818152600190935290822054909250908190036114da576040517f7229481100000000000000000000000000000000000000000000000000000000815260048101839052602401610b3a565b608881901c670fffffffffffffff1660c482901c5f80806114fe8b87898888611952565b92509250925089156115f3575f80608388901c601f16600981111561153a5760098103600a0a8c8161153257611532613303565b049150611546565b80600903600a0a8c0291505b50611552818c85611d24565b61155d8185856121ff565b91505f82611fff8a16620f42409081039082028161157d5761157d613303565b04039283019290506064600d8a901c607f1682020483039790970196506115a481876131f7565b95506115b1878787611df2565b607e88901c601f1660098111156115d25760098103600a0a83029a506115eb565b80600903600a0a83816115e7576115e7613303565b049a505b5050506116d8565b5f80607e88901c601f1660098111156116235760098103600a0a8c8161161b5761161b613303565b04915061162f565b80600903600a0a8c0291505b5061163b818c86611d24565b6116468184866121ff565b91505f82611fff8a16620f42409081039082028161166657611666613303565b04039283019290506064600d8a901c607f16820204830396909601955061168d81886131f7565b965061169a878787611e3d565b608388901c601f1660098111156116bb5760098103600a0a83029a506116d4565b80600903600a0a83816116d0576116d0613303565b049a505b5050505b601486901c600316801561182e575f601f607e89901c81169060838a901c168d1561178e575f5f60098411156117255760098403600a0a8e8161171d5761171d613303565b049150611731565b83600903600a0a8e0291505b60098311156117575760098303600a0a8f8161174f5761174f613303565b049050611763565b82600903600a0a8f0290505b8188016b033b2e3c9fd0803ce8000000828903028161178457611784613303565b049450505061181b565b5f5f60098311156117b65760098303600a0a8e816117ae576117ae613303565b0491506117c2565b82600903600a0a8e0291505b60098411156117e85760098403600a0a8f816117e0576117e0613303565b0490506117f4565b83600903600a0a8f0290505b8088036b033b2e3c9fd0803ce8000000838901028161181557611815613303565b04945050505b505061182a888a848489611e98565b9150505b600181118061184457506001601688901c166001145b1561187f575f88815260026020526040902080547ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000016421790555b50670fffffffffffffff85118061189d5750670fffffffffffffff84115b156118e5576040517f9e0db878000000000000000000000000000000000000000000000000000000008152600481018890526024810186905260448101859052606401610b3a565b5f8781526001602081905260408220805470ffffffffffffffffffffffffffffffffff16608889901b1760c488901b1790557fa2babd1c089bb9a4c9c6dc3859310edeabaeffa193c671b52a0c806d4bfa0d33918991603d8d901b91908c901b908e610f8b576001610f8d565b5f5f5f6001601688901c165f03611a8d576207ffff603f88901c169250825f036119915763ffffffff601f88901c1660ff601789901c161b9250611a9b565b6119bb7f000000000000000000000000000000000000000000000000000000000000000084612213565b73ffffffffffffffffffffffffffffffffffffffff166302c59a686119e360208b018b613172565b6119f360408c0160208d01613172565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9283166004820152911660248201526044016020604051808303815f875af1158015611a62573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a869190613021565b9250611a9b565b611a9888888861267c565b92505b613fff605388901c811690606189901c16600160528a901c81169003611acf57611ac782828b8b612907565b9a5090925090505b5f5f83620186a003620186a0880281611aea57611aea613303565b04915050620186a0828103870204600360148c901c165f6001821115611c315781600203611b6557505f8b815260026020526040902054602181901c62ffffff166401ffffffff8216420381811015611b5a5781818c88030281611b5057611b50613303565b048b019a50611b5e565b859a505b5050611bbc565b81600303611bbc57505f8b815260026020526040902054602181901c62ffffff166401ffffffff8216420381811015611bb5578181868d030281611bab57611bab613303565b048b039a50611bb9565b849a505b50505b8015611c3157620fffff604182901c1660ff603983901c161b915081891115611be757819850611c08565b620fffff605d82901c1660ff605583901c161b915081891015611c08578198505b85620186a003620186a08a0281611c2157611c21613303565b049350620186a08581038a020492505b6f4b3b4ca85a86c47a098a224000000000841015611c5b57611c548385026129d0565b9150611c87565b611c7a670de0b6b3a76400008404670de0b6b3a76400008604026129d0565b670de0b6b3a76400000291505b6b033b2e3c9fd0803ce8000000821015611cb157611ca782858d8d612a82565b9098509650611d0e565b611d0982760a70c3c40a64e6c51999090b65f67d924000000000000081611cda57611cda613303565b0484760a70c3c40a64e6c51999090b65f67d924000000000000081611d0157611d01613303565b048c8e612a82565b985096505b50969c959098019a505050930195509350505050565b612710831080611d3b5750670fffffffffffffff83115b80611d47575061271082105b80611d6157506fffffffffffffffffffffffffffffffff82115b15611d98576040517fdc01ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028104831115611040576040517f9df50ff000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f83830182850281611de957611de9613303565b04949350505050565b6c7e37be2022c0914b268000000083820204821015611040576040517fbeb0d9c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61271081026b033b2e3c9fd0803ce8000000830281611e5e57611e5e613303565b04831015611040576040517fbeb0d9c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f613fff605387901c811690606188901c166001605289901c81169003611ecd57611ec582828a8a612907565b995090925090505b81620186a003620186a0850281611ee657611ee6613303565b049150620186a08181038502049050607f607089901c81169060778a901c166001606f8b901c81169003611f2557611f1f82828b612afb565b90925090505b6064918203868503028290048601919081038387030204850381871115611f985787600214611f93575050505f86815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcfffff16622000001790555060029050612044565b61203c565b80871015611fed5787600314611f93575050505f86815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcfffff16623000001790555060039050612044565b8760011461203c575050505f86815260016020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcfffff166210000017905591506120449050565b879450505050505b95945050505050565b5f5f5f5f5f8587614e20f1905080611040576040517fdee51a8a0000000000000000000000000000000000000000000000000000000081526201155a6004820152602401610b3a565b5f6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015282602482015260205f6044835f895af13d15601f3d1160015f511416171691505080612136576040517fdee51a8a0000000000000000000000000000000000000000000000000000000081526201155a6004820152602401610b3a565b50505050565b5f6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff8416602482015282604482015260205f6064835f8a5af13d15601f3d1160015f5114161716915050806121f8576040517fdee51a8a000000000000000000000000000000000000000000000000000000008152620115596004820152602401610b3a565b5050505050565b5f83820383850281611de957611de9613303565b5f6060825f03612226575f915050612676565b607f83116122ef576040517fd60000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602282015260f884901b7fff000000000000000000000000000000000000000000000000000000000000001660368201526037015b604051602081830303815290604052905061266b565b60ff83116123cc576040517fd70000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f8100000000000000000000000000000000000000000000000000000000000000603682015260f884901b7fff000000000000000000000000000000000000000000000000000000000000001660378201526038016122d9565b61ffff83116124aa576040517fd80000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f820000000000000000000000000000000000000000000000000000000000000060368201527fffff00000000000000000000000000000000000000000000000000000000000060f085901b1660378201526039016122d9565b62ffffff8311612589576040517fd90000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f830000000000000000000000000000000000000000000000000000000000000060368201527fffffff000000000000000000000000000000000000000000000000000000000060e885901b166037820152603a016122d9565b6040517fda0000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f840000000000000000000000000000000000000000000000000000000000000060368201527fffffffff0000000000000000000000000000000000000000000000000000000060e085901b166037820152603b0160405160208183030381529060405290505b805160209091012090505b92915050565b5f81815260026020526040812054601f84901c63ffffffff16601785901c60ff161b906401ffffffff609982901c81169082168181116126bc57816126be565b805b90506126f37f00000000000000000000000000000000000000000000000000000000000000006207ffff603f8a901c16612213565b73ffffffffffffffffffffffffffffffffffffffff166302c59a6861271b60208b018b613172565b61272b60408c0160208d01613172565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9283166004820152911660248201526044016020604051808303815f875af115801561279a573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127be9190613021565b94505f620f4240620fffff608586901c1602824203620fffff607187901c16870202816127ed576127ed613303565b0490508486111561287457938401938486111561280c578495506128fb565b5f87815260026020908152604080832080547ffffffffffffffffffc000000000000000001ffffffffffffffffffffffffffff1690556001909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff1690556128fb565b808511612881575f612885565b8085035b945084861015612897578495506128fb565b5f87815260026020908152604080832080547ffffffffffffffffffc000000000000000001ffffffffffffffffffffffffffff1690556001909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff1690555b50505050509392505050565b5f8181526003602052604081205481908190601c81901c620fffff16603082901c6401ffffffff1683428284011015612991575050505f8581526003602090815260408083208390556001909152902080547ffffffffffffffffffffffffffffffffffffffffffffbffffffffffffffffffff169081905595508793508692508591506129c69050565b50428190036129a68b613fff86168386612bb3565b6129ba8b613fff600e88901c168487612bb3565b8a965096509650505050505b9450945094915050565b60b5817101000000000000000000000000000000000081106129f75760409190911b9060801c5b69010000000000000000008110612a135760209190911b9060401c5b650100000000008110612a2b5760109190911b9060201c5b63010000008110612a415760089190911b9060101c5b62010000010260121c80820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c908190048111900390565b5f8085850381600282028689026b033b2e3c9fd0803ce800000087020181612aac57612aac613303565b049050612adb818202836b033b2e3c9fd0803ce8000000888a020281612ad457612ad4613303565b04016129d0565b01976b033b2e3c9fd0803ce8000000978902979097049695505050505050565b5f818152600460205260408120548190600e81901c620fffff16602282901c6401ffffffff1683428284011015612b7b575050505f8481526004602090815260408083208390556001909152902080547fffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffff16905550849150839050612bab565b5042819003612b8f89607f86168386612bb3565b612ba289607f600788901c168487612bb3565b95509550505050505b935093915050565b5f83851115612bd95781838587030281612bcf57612bcf613303565b0484019050612bf2565b81838686030281612bec57612bec613303565b04840390505b949350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114612c1b575f5ffd5b50565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f5f60408385031215612c5c575f5ffd5b8235612c6781612bfa565b9150602083013567ffffffffffffffff811115612c82575f5ffd5b8301601f81018513612c92575f5ffd5b803567ffffffffffffffff811115612cac57612cac612c1e565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff82111715612d1857612d18612c1e565b604052818152828201602001871015612d2f575f5ffd5b816020840160208301375f602083830101528093505050509250929050565b80358015158114612d5d575f5ffd5b919050565b8035612d5d81612bfa565b5f5f83601f840112612d7d575f5ffd5b50813567ffffffffffffffff811115612d94575f5ffd5b602083019150836020828501011115612dab575f5ffd5b9250929050565b5f5f5f5f5f5f5f5f5f5f8a8c03610140811215612dcd575f5ffd5b6060811215612dda575f5ffd5b508a9950612dea60608c01612d4e565b985060808b0135975060a08b01359650612e0660c08c01612d62565b9550612e1460e08c01612d4e565b94506101008b013567ffffffffffffffff811115612e30575f5ffd5b612e3c8d828e01612d6d565b9095509350506101208b013567ffffffffffffffff811115612e5c575f5ffd5b612e688d828e01612d6d565b915080935050809150509295989b9194979a5092959850565b5f5f83601f840112612e91575f5ffd5b50813567ffffffffffffffff811115612ea8575f5ffd5b6020830191508360208260051b8501011115612dab575f5ffd5b5f5f83601f840112612ed2575f5ffd5b50813567ffffffffffffffff811115612ee9575f5ffd5b602083019150836020606083028501011115612dab575f5ffd5b5f5f5f5f5f5f5f5f5f5f5f5f6101008d8f031215612f1f575f5ffd5b67ffffffffffffffff8d351115612f34575f5ffd5b612f418e8e358f01612e81565b909c509a5067ffffffffffffffff60208e01351115612f5e575f5ffd5b612f6e8e60208f01358f01612ec2565b909a50985060408d0135975060608d01359650612f8d60808e01612d62565b9550612f9b60a08e01612d4e565b945067ffffffffffffffff60c08e01351115612fb5575f5ffd5b612fc58e60c08f01358f01612d6d565b909450925067ffffffffffffffff60e08e01351115612fe2575f5ffd5b612ff28e60e08f01358f01612d6d565b81935080925050509295989b509295989b509295989b565b5f6020828403121561301a575f5ffd5b5035919050565b5f60208284031215613031575f5ffd5b5051919050565b803561304381612bfa565b73ffffffffffffffffffffffffffffffffffffffff168252602081013561306981612bfa565b73ffffffffffffffffffffffffffffffffffffffff166020830152604090810135910152565b81835281816020850137505f602082840101525f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6130e08188613038565b85151560608201528460808201528360a082015260e060c08201525f61310a60e08301848661308f565b98975050505050505050565b8215158152604060208201525f82518060408401528060208501606085015e5f6060828501015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150509392505050565b5f60208284031215613182575f5ffd5b813561318d81612bfa565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f7f800000000000000000000000000000000000000000000000000000000000000082036131f1576131f1613194565b505f0390565b8181038181111561267657612676613194565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b60a080825281018890525f8960c08301825b8b81101561328657823561325c81612bfa565b73ffffffffffffffffffffffffffffffffffffffff16825260209283019290910190600101613249565b50838103602080860191909152898252019050885f805b8a8110156132c2576132af8484613038565b606093840193929092019160010161329d565b505050604083018790526060830186905282810360808401526132e681858761308f565b9b9a5050505050505050505050565b606081016126768284613038565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b73ffffffffffffffffffffffffffffffffffffffff85168152836020820152606060408201525f61336560608301848661308f565b969550505050505056fea2646970667358221220602bd8c7361de01d318dbc104d5f5b06fa171e7d62506e7d5b3fba6c65d1741664736f6c634300081d0033",
  "deployedBytecode": "0x608060405260043610610037575f3560e01c80637fc9d4ad146100c2578063b592f8a6146100e7578063b5c736e4146100fa5761003e565b3661003e57005b5f36606061004a610118565b335f9081526020819052604090205460011480159061008657503361006d610169565b73ffffffffffffffffffffffffffffffffffffffff1614155b1561008f575f5ffd5b5f8061009d84860186612c4b565b915091506100ab828261023c565b925050506100b761027e565b915050805190602001f35b6100d56100d0366004612db2565b6102a3565b60405190815260200160405180910390f35b6100d56100f5366004612f03565b610455565b348015610105575f5ffd5b506100d561011436600461300a565b5490565b7fb9cde754d19acfff2b3ccabc66f256d3563a0bc5805da4205f01a9bda38a2df75c15610143575f5ffd5b60017fb9cde754d19acfff2b3ccabc66f256d3563a0bc5805da4205f01a9bda38a2df75d565b6040517fb5c736e40000000000000000000000000000000000000000000000000000000081527fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360048201525f907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b5c736e490602401602060405180830381865afa158015610213573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102379190613021565b905090565b60605f5f835160208501865af43d6040519250601f19601f6020830101168301604052808352805f602085013e8161027657805f5f3e805ffd5b505092915050565b5f7fb9cde754d19acfff2b3ccabc66f256d3563a0bc5805da4205f01a9bda38a2df75d565b5f6102ac610118565b5f89131561039c576102bf8b8b8b610aa8565b90508781116102cc575f5ffd5b81156103475761034260018c8c8c8588886040516020016102f2969594939291906130d6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905261032e9291602001613116565b604051602081830303815290604052610fbe565b61043f565b891561037b5761034261035d60208d018d613172565b8a8d60200160208101906103719190613172565b848b8b8b8b611045565b61034261038e60408d0160208e01613172565b8a61037160208f018f613172565b6103af8b8b6103aa8c6131c1565b611444565b90508781106103bc575f5ffd5b81156103e25761034260018c8c8c8588886040516020016102f2969594939291906130d6565b891561041e576103426103f860208d018d613172565b828d602001602081019061040c9190613172565b6104158d6131c1565b8b8b8b8b611045565b61043f61043160408d0160208e01613172565b8261040c60208f018f613172565b61044761027e565b9a9950505050505050505050565b5f61045e610118565b5f8a900361046a575f5ffd5b8961047660018e6131f7565b1461047f575f5ffd5b5f8913156107745750875f5b8a8110156106e8575f8c8c838181106104a6576104a661320a565b6104bc9260206060909202019081019150613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f848181106104e4576104e461320a565b90506020020160208101906104f99190613172565b73ffffffffffffffffffffffffffffffffffffffff1614801561059957508c8c838181106105295761052961320a565b90506060020160200160208101906105419190613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f8460010181811061056c5761056c61320a565b90506020020160208101906105819190613172565b73ffffffffffffffffffffffffffffffffffffffff16145b156105a6575060016106bb565b8c8c838181106105b8576105b861320a565b90506060020160200160208101906105d09190613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f848181106105f8576105f861320a565b905060200201602081019061060d9190613172565b73ffffffffffffffffffffffffffffffffffffffff161480156106ab57508c8c8381811061063d5761063d61320a565b6106539260206060909202019081019150613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f8460010181811061067e5761067e61320a565b90506020020160208101906106939190613172565b73ffffffffffffffffffffffffffffffffffffffff16145b156106b757505f6106bb565b5f5ffd5b6106dd8d8d848181106106d0576106d061320a565b9050606002018285610aa8565b92505060010161048b565b508781116106f4575f5ffd5b81156107225761071d5f8e8e8e8e8e878a8a6040516020016102f2989796959493929190613237565b610a90565b61071d8d8d5f8181106107375761073761320a565b905060200201602081019061074c9190613172565b8a8f8f8e81811061075f5761075f61320a565b90506020020160208101906103719190613172565b61077d896131c1565b9050895b8015610a09575f8c8c6001840381811061079d5761079d61320a565b6107b39260206060909202019081019150613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f600185038181106107de576107de61320a565b90506020020160208101906107f39190613172565b73ffffffffffffffffffffffffffffffffffffffff1614801561089357508c8c600184038181106108265761082661320a565b905060600201602001602081019061083e9190613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f848181106108665761086661320a565b905060200201602081019061087b9190613172565b73ffffffffffffffffffffffffffffffffffffffff16145b156108a0575060016109b3565b8c8c600184038181106108b5576108b561320a565b90506060020160200160208101906108cd9190613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f600185038181106108f8576108f861320a565b905060200201602081019061090d9190613172565b73ffffffffffffffffffffffffffffffffffffffff161480156109ab57508c8c600184038181106109405761094061320a565b6109569260206060909202019081019150613172565b73ffffffffffffffffffffffffffffffffffffffff168f8f8481811061097e5761097e61320a565b90506020020160208101906109939190613172565b73ffffffffffffffffffffffffffffffffffffffff16145b156106b757505f5b6109df8d8d6109c36001866131f7565b8181106109d2576109d261320a565b9050606002018285611444565b9250507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610781565b50878110610a15575f5ffd5b8115610a3e5761071d5f8e8e8e8e8e878a8a6040516020016102f2989796959493929190613237565b610a908d8d5f818110610a5357610a5361320a565b9050602002016020810190610a689190613172565b828f8f8e818110610a7b57610a7b61320a565b905060200201602081019061040c9190613172565b610a9861027e565b9c9b505050505050505050505050565b5f5f84604051602001610abb91906132f5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301205f81815260019093529082205490925090819003610b43576040517f72294811000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b608881901c670fffffffffffffff1660c482901c5f8080610b678b87898888611952565b9250925092508915610c44575f80607e88901c601f166009811115610ba35760098103600a0a8c81610b9b57610b9b613303565b049250610baf565b80600903600a0a8c0292505b50610bbb828c86611d24565b620f4240611fff8916830204610bd48184038686611dd5565b91506064600d8a901c607f168202048303979097019650610bf581876131f7565b9550610c02878787611df2565b608388901c601f166009811115610c235760098103600a0a82029a50610c3c565b80600903600a0a8281610c3857610c38613303565b049a505b505050610d11565b5f80608388901c601f166009811115610c745760098103600a0a8c81610c6c57610c6c613303565b049250610c80565b80600903600a0a8c0292505b50610c8c828c85611d24565b620f4240611fff8916830204610ca58184038587611dd5565b91506064600d8a901c607f168202048303969096019550610cc681886131f7565b9650610cd3878787611e3d565b607e88901c601f166009811115610cf45760098103600a0a82029a50610d0d565b80600903600a0a8281610d0957610d09613303565b049a505b5050505b601486901c6003168015610e67575f601f607e89901c81169060838a901c168d15610dc7575f5f6009841115610d5e5760098403600a0a8f81610d5657610d56613303565b049150610d6a565b83600903600a0a8f0291505b6009831115610d905760098303600a0a8e81610d8857610d88613303565b049050610d9c565b82600903600a0a8e0290505b8188016b033b2e3c9fd0803ce80000008289030281610dbd57610dbd613303565b0494505050610e54565b5f5f6009831115610def5760098303600a0a8f81610de757610de7613303565b049150610dfb565b82600903600a0a8f0291505b6009841115610e215760098403600a0a8e81610e1957610e19613303565b049050610e2d565b83600903600a0a8e0290505b8088036b033b2e3c9fd0803ce80000008389010281610e4e57610e4e613303565b04945050505b5050610e63888a848489611e98565b9150505b6001811180610e7d57506001601688901c166001145b15610eb8575f88815260026020526040902080547ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000016421790555b50670fffffffffffffff851180610ed65750670fffffffffffffff84115b15610f1e576040517f9e0db878000000000000000000000000000000000000000000000000000000008152600481018890526024810186905260448101859052606401610b3a565b5f8781526001602081905260408220805470ffffffffffffffffffffffffffffffffff16608889901b1760c488901b1790557fa2babd1c089bb9a4c9c6dc3859310edeabaeffa193c671b52a0c806d4bfa0d33918991603d8c901b91908d901b908e610f8b576001610f8d565b5f5b901b1717604051610fa8929190918252602082015260400190565b60405180910390a1505050505050509392505050565b5f610fe77f7e8134afb5ed35d36cb65e24b9a4712a52bb77d952806c1acf50970d2107797f5490565b905073ffffffffffffffffffffffffffffffffffffffff8116611036576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611040818361023c565b505050565b73ffffffffffffffffffffffffffffffffffffffff8416611064573393505b7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff8716016110b0576110ab848661204d565b6110bb565b6110bb868587612096565b7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff89160161121e57828015611103575034155b156111c4576040517fb6a545480000000000000000000000000000000000000000000000000000000081524790339063b6a545489061114c908c908c9088908890600401613330565b5f604051808303815f87803b158015611163575f5ffd5b505af1158015611175573d5f5f3e3d5ffd5b5050505087814761118691906131f7565b10156111be576040517f64403ed200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061143a565b863410156111fe576040517f64403ed200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86341115611219576112193361121489346131f7565b61204d565b61143a565b3415611256576040517f1841b4e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b821561142e576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff8a16906370a0823190602401602060405180830381865afa1580156112c6573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112ea9190613021565b6040517fb6a54548000000000000000000000000000000000000000000000000000000008152909150339063b6a545489061132f908c908c9088908890600401613330565b5f604051808303815f87803b158015611346575f5ffd5b505af1158015611358573d5f5f3e3d5ffd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201528a925083915073ffffffffffffffffffffffffffffffffffffffff8c16906370a0823190602401602060405180830381865afa1580156113c8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113ec9190613021565b6113f691906131f7565b10156111be576040517f5d052a9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61143a8833308a61213c565b5050505050505050565b5f5f8460405160200161145791906132f5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301205f818152600190935290822054909250908190036114da576040517f7229481100000000000000000000000000000000000000000000000000000000815260048101839052602401610b3a565b608881901c670fffffffffffffff1660c482901c5f80806114fe8b87898888611952565b92509250925089156115f3575f80608388901c601f16600981111561153a5760098103600a0a8c8161153257611532613303565b049150611546565b80600903600a0a8c0291505b50611552818c85611d24565b61155d8185856121ff565b91505f82611fff8a16620f42409081039082028161157d5761157d613303565b04039283019290506064600d8a901c607f1682020483039790970196506115a481876131f7565b95506115b1878787611df2565b607e88901c601f1660098111156115d25760098103600a0a83029a506115eb565b80600903600a0a83816115e7576115e7613303565b049a505b5050506116d8565b5f80607e88901c601f1660098111156116235760098103600a0a8c8161161b5761161b613303565b04915061162f565b80600903600a0a8c0291505b5061163b818c86611d24565b6116468184866121ff565b91505f82611fff8a16620f42409081039082028161166657611666613303565b04039283019290506064600d8a901c607f16820204830396909601955061168d81886131f7565b965061169a878787611e3d565b608388901c601f1660098111156116bb5760098103600a0a83029a506116d4565b80600903600a0a83816116d0576116d0613303565b049a505b5050505b601486901c600316801561182e575f601f607e89901c81169060838a901c168d1561178e575f5f60098411156117255760098403600a0a8e8161171d5761171d613303565b049150611731565b83600903600a0a8e0291505b60098311156117575760098303600a0a8f8161174f5761174f613303565b049050611763565b82600903600a0a8f0290505b8188016b033b2e3c9fd0803ce8000000828903028161178457611784613303565b049450505061181b565b5f5f60098311156117b65760098303600a0a8e816117ae576117ae613303565b0491506117c2565b82600903600a0a8e0291505b60098411156117e85760098403600a0a8f816117e0576117e0613303565b0490506117f4565b83600903600a0a8f0290505b8088036b033b2e3c9fd0803ce8000000838901028161181557611815613303565b04945050505b505061182a888a848489611e98565b9150505b600181118061184457506001601688901c166001145b1561187f575f88815260026020526040902080547ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000016421790555b50670fffffffffffffff85118061189d5750670fffffffffffffff84115b156118e5576040517f9e0db878000000000000000000000000000000000000000000000000000000008152600481018890526024810186905260448101859052606401610b3a565b5f8781526001602081905260408220805470ffffffffffffffffffffffffffffffffff16608889901b1760c488901b1790557fa2babd1c089bb9a4c9c6dc3859310edeabaeffa193c671b52a0c806d4bfa0d33918991603d8d901b91908c901b908e610f8b576001610f8d565b5f5f5f6001601688901c165f03611a8d576207ffff603f88901c169250825f036119915763ffffffff601f88901c1660ff601789901c161b9250611a9b565b6119bb7f000000000000000000000000000000000000000000000000000000000000000084612213565b73ffffffffffffffffffffffffffffffffffffffff166302c59a686119e360208b018b613172565b6119f360408c0160208d01613172565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9283166004820152911660248201526044016020604051808303815f875af1158015611a62573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a869190613021565b9250611a9b565b611a9888888861267c565b92505b613fff605388901c811690606189901c16600160528a901c81169003611acf57611ac782828b8b612907565b9a5090925090505b5f5f83620186a003620186a0880281611aea57611aea613303565b04915050620186a0828103870204600360148c901c165f6001821115611c315781600203611b6557505f8b815260026020526040902054602181901c62ffffff166401ffffffff8216420381811015611b5a5781818c88030281611b5057611b50613303565b048b019a50611b5e565b859a505b5050611bbc565b81600303611bbc57505f8b815260026020526040902054602181901c62ffffff166401ffffffff8216420381811015611bb5578181868d030281611bab57611bab613303565b048b039a50611bb9565b849a505b50505b8015611c3157620fffff604182901c1660ff603983901c161b915081891115611be757819850611c08565b620fffff605d82901c1660ff605583901c161b915081891015611c08578198505b85620186a003620186a08a0281611c2157611c21613303565b049350620186a08581038a020492505b6f4b3b4ca85a86c47a098a224000000000841015611c5b57611c548385026129d0565b9150611c87565b611c7a670de0b6b3a76400008404670de0b6b3a76400008604026129d0565b670de0b6b3a76400000291505b6b033b2e3c9fd0803ce8000000821015611cb157611ca782858d8d612a82565b9098509650611d0e565b611d0982760a70c3c40a64e6c51999090b65f67d924000000000000081611cda57611cda613303565b0484760a70c3c40a64e6c51999090b65f67d924000000000000081611d0157611d01613303565b048c8e612a82565b985096505b50969c959098019a505050930195509350505050565b612710831080611d3b5750670fffffffffffffff83115b80611d47575061271082105b80611d6157506fffffffffffffffffffffffffffffffff82115b15611d98576040517fdc01ad3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028104831115611040576040517f9df50ff000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f83830182850281611de957611de9613303565b04949350505050565b6c7e37be2022c0914b268000000083820204821015611040576040517fbeb0d9c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61271081026b033b2e3c9fd0803ce8000000830281611e5e57611e5e613303565b04831015611040576040517fbeb0d9c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f613fff605387901c811690606188901c166001605289901c81169003611ecd57611ec582828a8a612907565b995090925090505b81620186a003620186a0850281611ee657611ee6613303565b049150620186a08181038502049050607f607089901c81169060778a901c166001606f8b901c81169003611f2557611f1f82828b612afb565b90925090505b6064918203868503028290048601919081038387030204850381871115611f985787600214611f93575050505f86815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcfffff16622000001790555060029050612044565b61203c565b80871015611fed5787600314611f93575050505f86815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcfffff16623000001790555060039050612044565b8760011461203c575050505f86815260016020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcfffff166210000017905591506120449050565b879450505050505b95945050505050565b5f5f5f5f5f8587614e20f1905080611040576040517fdee51a8a0000000000000000000000000000000000000000000000000000000081526201155a6004820152602401610b3a565b5f6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015282602482015260205f6044835f895af13d15601f3d1160015f511416171691505080612136576040517fdee51a8a0000000000000000000000000000000000000000000000000000000081526201155a6004820152602401610b3a565b50505050565b5f6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff8416602482015282604482015260205f6064835f8a5af13d15601f3d1160015f5114161716915050806121f8576040517fdee51a8a000000000000000000000000000000000000000000000000000000008152620115596004820152602401610b3a565b5050505050565b5f83820383850281611de957611de9613303565b5f6060825f03612226575f915050612676565b607f83116122ef576040517fd60000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602282015260f884901b7fff000000000000000000000000000000000000000000000000000000000000001660368201526037015b604051602081830303815290604052905061266b565b60ff83116123cc576040517fd70000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f8100000000000000000000000000000000000000000000000000000000000000603682015260f884901b7fff000000000000000000000000000000000000000000000000000000000000001660378201526038016122d9565b61ffff83116124aa576040517fd80000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f820000000000000000000000000000000000000000000000000000000000000060368201527fffff00000000000000000000000000000000000000000000000000000000000060f085901b1660378201526039016122d9565b62ffffff8311612589576040517fd90000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f830000000000000000000000000000000000000000000000000000000000000060368201527fffffff000000000000000000000000000000000000000000000000000000000060e885901b166037820152603a016122d9565b6040517fda0000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f840000000000000000000000000000000000000000000000000000000000000060368201527fffffffff0000000000000000000000000000000000000000000000000000000060e085901b166037820152603b0160405160208183030381529060405290505b805160209091012090505b92915050565b5f81815260026020526040812054601f84901c63ffffffff16601785901c60ff161b906401ffffffff609982901c81169082168181116126bc57816126be565b805b90506126f37f00000000000000000000000000000000000000000000000000000000000000006207ffff603f8a901c16612213565b73ffffffffffffffffffffffffffffffffffffffff166302c59a6861271b60208b018b613172565b61272b60408c0160208d01613172565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9283166004820152911660248201526044016020604051808303815f875af115801561279a573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127be9190613021565b94505f620f4240620fffff608586901c1602824203620fffff607187901c16870202816127ed576127ed613303565b0490508486111561287457938401938486111561280c578495506128fb565b5f87815260026020908152604080832080547ffffffffffffffffffc000000000000000001ffffffffffffffffffffffffffff1690556001909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff1690556128fb565b808511612881575f612885565b8085035b945084861015612897578495506128fb565b5f87815260026020908152604080832080547ffffffffffffffffffc000000000000000001ffffffffffffffffffffffffffff1690556001909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff1690555b50505050509392505050565b5f8181526003602052604081205481908190601c81901c620fffff16603082901c6401ffffffff1683428284011015612991575050505f8581526003602090815260408083208390556001909152902080547ffffffffffffffffffffffffffffffffffffffffffffbffffffffffffffffffff169081905595508793508692508591506129c69050565b50428190036129a68b613fff86168386612bb3565b6129ba8b613fff600e88901c168487612bb3565b8a965096509650505050505b9450945094915050565b60b5817101000000000000000000000000000000000081106129f75760409190911b9060801c5b69010000000000000000008110612a135760209190911b9060401c5b650100000000008110612a2b5760109190911b9060201c5b63010000008110612a415760089190911b9060101c5b62010000010260121c80820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c908190048111900390565b5f8085850381600282028689026b033b2e3c9fd0803ce800000087020181612aac57612aac613303565b049050612adb818202836b033b2e3c9fd0803ce8000000888a020281612ad457612ad4613303565b04016129d0565b01976b033b2e3c9fd0803ce8000000978902979097049695505050505050565b5f818152600460205260408120548190600e81901c620fffff16602282901c6401ffffffff1683428284011015612b7b575050505f8481526004602090815260408083208390556001909152902080547fffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffff16905550849150839050612bab565b5042819003612b8f89607f86168386612bb3565b612ba289607f600788901c168487612bb3565b95509550505050505b935093915050565b5f83851115612bd95781838587030281612bcf57612bcf613303565b0484019050612bf2565b81838686030281612bec57612bec613303565b04840390505b949350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114612c1b575f5ffd5b50565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f5f60408385031215612c5c575f5ffd5b8235612c6781612bfa565b9150602083013567ffffffffffffffff811115612c82575f5ffd5b8301601f81018513612c92575f5ffd5b803567ffffffffffffffff811115612cac57612cac612c1e565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff82111715612d1857612d18612c1e565b604052818152828201602001871015612d2f575f5ffd5b816020840160208301375f602083830101528093505050509250929050565b80358015158114612d5d575f5ffd5b919050565b8035612d5d81612bfa565b5f5f83601f840112612d7d575f5ffd5b50813567ffffffffffffffff811115612d94575f5ffd5b602083019150836020828501011115612dab575f5ffd5b9250929050565b5f5f5f5f5f5f5f5f5f5f8a8c03610140811215612dcd575f5ffd5b6060811215612dda575f5ffd5b508a9950612dea60608c01612d4e565b985060808b0135975060a08b01359650612e0660c08c01612d62565b9550612e1460e08c01612d4e565b94506101008b013567ffffffffffffffff811115612e30575f5ffd5b612e3c8d828e01612d6d565b9095509350506101208b013567ffffffffffffffff811115612e5c575f5ffd5b612e688d828e01612d6d565b915080935050809150509295989b9194979a5092959850565b5f5f83601f840112612e91575f5ffd5b50813567ffffffffffffffff811115612ea8575f5ffd5b6020830191508360208260051b8501011115612dab575f5ffd5b5f5f83601f840112612ed2575f5ffd5b50813567ffffffffffffffff811115612ee9575f5ffd5b602083019150836020606083028501011115612dab575f5ffd5b5f5f5f5f5f5f5f5f5f5f5f5f6101008d8f031215612f1f575f5ffd5b67ffffffffffffffff8d351115612f34575f5ffd5b612f418e8e358f01612e81565b909c509a5067ffffffffffffffff60208e01351115612f5e575f5ffd5b612f6e8e60208f01358f01612ec2565b909a50985060408d0135975060608d01359650612f8d60808e01612d62565b9550612f9b60a08e01612d4e565b945067ffffffffffffffff60c08e01351115612fb5575f5ffd5b612fc58e60c08f01358f01612d6d565b909450925067ffffffffffffffff60e08e01351115612fe2575f5ffd5b612ff28e60e08f01358f01612d6d565b81935080925050509295989b509295989b509295989b565b5f6020828403121561301a575f5ffd5b5035919050565b5f60208284031215613031575f5ffd5b5051919050565b803561304381612bfa565b73ffffffffffffffffffffffffffffffffffffffff168252602081013561306981612bfa565b73ffffffffffffffffffffffffffffffffffffffff166020830152604090810135910152565b81835281816020850137505f602082840101525f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6130e08188613038565b85151560608201528460808201528360a082015260e060c08201525f61310a60e08301848661308f565b98975050505050505050565b8215158152604060208201525f82518060408401528060208501606085015e5f6060828501015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150509392505050565b5f60208284031215613182575f5ffd5b813561318d81612bfa565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f7f800000000000000000000000000000000000000000000000000000000000000082036131f1576131f1613194565b505f0390565b8181038181111561267657612676613194565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b60a080825281018890525f8960c08301825b8b81101561328657823561325c81612bfa565b73ffffffffffffffffffffffffffffffffffffffff16825260209283019290910190600101613249565b50838103602080860191909152898252019050885f805b8a8110156132c2576132af8484613038565b606093840193929092019160010161329d565b505050604083018790526060830186905282810360808401526132e681858761308f565b9b9a5050505050505050505050565b606081016126768284613038565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b73ffffffffffffffffffffffffffffffffffffffff85168152836020820152606060408201525f61336560608301848661308f565b969550505050505056fea2646970667358221220602bd8c7361de01d318dbc104d5f5b06fa171e7d62506e7d5b3fba6c65d1741664736f6c634300081d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "swapMultihop(address[],(address,address,bytes32)[],int256,uint256,address,bool,bytes,bytes)": {
        "details": "Uses _swapIn for positive amountSpecified_ (user provides input), _swapOut for negative (user receives output).",
        "params": {
          "amountLimit_": "The minimum/maximum amount for the unspecified side.",
          "amountSpecified_": "The amount to swap (positive for exact input, negative for exact output).",
          "callbackData_": "Data to pass to the callback.",
          "dexKeys_": "The dex pools to swap through.",
          "isCallback_": "Whether to invoke a callback for transfering the input token.",
          "path_": "The path of the swap.",
          "to_": "The recipient address."
        },
        "returns": {
          "amountUnspecified_": "The amount of the unspecified token."
        }
      },
      "swapSingle((address,address,bytes32),bool,int256,uint256,address,bool,bytes,bytes)": {
        "details": "Uses _swapIn for positive amountSpecified_ (user provides input), _swapOut for negative (user receives output).",
        "params": {
          "amountLimit_": "The minimum/maximum amount for the unspecified side.",
          "amountSpecified_": "The amount to swap (positive for exact input, negative for exact output).",
          "dexKey_": "The dex pool to swap through.",
          "swap0To1_": "Whether to swap from token0 to token1 or vice versa.",
          "to_": "The recipient address."
        }
      }
    },
    "title": "FluidDexLite",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swapMultihop(address[],(address,address,bytes32)[],int256,uint256,address,bool,bytes,bytes)": {
        "notice": "Swap through a path of dex pools"
      },
      "swapSingle((address,address,bytes32),bool,int256,uint256,address,bool,bytes,bytes)": {
        "notice": "Swap through a single dex pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7078,
        "contract": "contracts/protocols/dexLite/core/main.sol:FluidDexLite",
        "label": "_isAuth",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7083,
        "contract": "contracts/protocols/dexLite/core/main.sol:FluidDexLite",
        "label": "_dexVariables",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 7088,
        "contract": "contracts/protocols/dexLite/core/main.sol:FluidDexLite",
        "label": "_centerPriceShift",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 7093,
        "contract": "contracts/protocols/dexLite/core/main.sol:FluidDexLite",
        "label": "_rangeShift",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 7098,
        "contract": "contracts/protocols/dexLite/core/main.sol:FluidDexLite",
        "label": "_thresholdShift",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}